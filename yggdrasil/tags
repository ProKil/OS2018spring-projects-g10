!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/c04ceb8/
%.c	Makefile	/^%.c: %.py$/;"	t
%.c	Makefile	/^%.c: %.pyx$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
%.so	Makefile	/^%.so: %.o$/;"	t
ATTRS	yggdrasil/diskspec.py	/^    ATTRS = 1$/;"	v	class:InodeSpec
Allocator	diskimpl.pxd	/^cdef class Allocator:$/;"	c
Allocator	diskimpl.pyx	/^cdef class Allocator:$/;"	c
Allocator32	disk.py	/^Allocator32 = _native(diskimpl.Allocator, diskspec.Allocator32)$/;"	v
Allocator32	yggdrasil/diskspec.py	/^class Allocator32(object):$/;"	c
Allocator64	disk.py	/^Allocator64 = _native(diskimpl.Allocator, diskspec.Allocator64)$/;"	v
Allocator64	yggdrasil/diskspec.py	/^class Allocator64(object):$/;"	c
And	disk.py	/^And = _native(diskimpl.And, z3.And)$/;"	v
And	diskimpl.pxd	/^cpdef bint And(bint a=*, bint b=*, bint c=*)$/;"	f
And	diskimpl.pyx	/^cpdef inline bint And(bint a=1, bint b=1, bint c=1):$/;"	f
And	test_fsck.pyx	/^class And(Node):$/;"	c
ArrayTest	test_ufarray.py	/^class ArrayTest(test.DiskTest):$/;"	c
AsyncDisk	disk.py	/^AsyncDisk = _native(diskimpl.AsyncDisk, AsyncDiskWrap)$/;"	v
AsyncDisk	diskimpl.pxd	/^cdef class AsyncDisk:$/;"	c
AsyncDisk	diskimpl.pyx	/^cdef class AsyncDisk:$/;"	c
AsyncDisk	yggdrasil/diskspec.py	/^class AsyncDisk(object):$/;"	c
AsyncDiskTest	test_diskspec.py	/^class AsyncDiskTest(test.DiskTest):$/;"	c
AsyncDiskWrap	disk.py	/^def AsyncDiskWrap(*args, **kwargs):$/;"	f
Attributes	dirspec.py	/^class Attributes(object):$/;"	c
BitVecVal	disk.py	/^BitVecVal = _native(diskimpl.BitVecVal, z3.BitVecVal)$/;"	v
BitVecVal	diskimpl.pxd	/^cpdef inline uint64_t BitVecVal(uint64_t val, uint64_t size):$/;"	f
BitmapDisk	bitmap.pxd	/^cdef class BitmapDisk:$/;"	c
BitmapDisk	bitmap.py	/^class BitmapDisk(object):$/;"	c
BitmapSpec	yggdrasil/diskspec.py	/^class BitmapSpec(object):$/;"	c
BitwiseBitField	yggdrasil/util.py	/^def BitwiseBitField(p, start, end):$/;"	f
Block	disk.py	/^Block = diskimpl.Block$/;"	v
Block	diskimpl.pxd	/^cdef class Block:$/;"	c
Block	diskimpl.pyx	/^cdef class Block:$/;"	c
Block	yggdrasil/ufarray.py	/^class Block(object):$/;"	c
BlockElementSort	yggdrasil/util.py	/^BlockElementSort = BitVecSort(64)$/;"	v
BlockImpl	test_inode.py	/^class BlockImpl(object):$/;"	c
BlockOffsetSort	yggdrasil/util.py	/^BlockOffsetSort = BitVecSort(LogBlockSize - (BlockElementSort.size().bit_length() - 1))$/;"	v
BlockSize	yggdrasil/util.py	/^BlockSize = 32 * 1024$/;"	v
BlockSort	yggdrasil/util.py	/^BlockSort = ArraySort(BitVecSort(LogBlockSize - 6), BitVecSort(64))$/;"	v
CFLAGS	Makefile	/^CFLAGS=-DFUSE_USE_VERSION=26 `pkg-config --cflags python2` `pkg-config --cflags fuse`$/;"	m
CPImpl	test_cp.py	/^class CPImpl(object):$/;"	c
CPRefinement	test_cp.py	/^class CPRefinement(test.RefinementTest):$/;"	c
CPSpec	test_cp.py	/^class CPSpec(object):$/;"	c
CURRENT	yggdrasil/solver.py	/^CURRENT = os.path.dirname(os.path.realpath(__file__))$/;"	v
Concat32	disk.py	/^Concat32 = _native(diskimpl.Concat32, ZConcat32)$/;"	v
Concat32	diskimpl.pxd	/^cpdef inline uint64_t Concat32(uint64_t a, uint64_t b):$/;"	f
ConstBlock	disk.py	/^ConstBlock = _native(diskimpl.ConstBlock, ufarray.ConstBlock)$/;"	v
ConstBlock	diskimpl.pxd	/^cpdef Block ConstBlock(uint64_t c)$/;"	f
ConstBlock	diskimpl.pyx	/^cpdef inline Block ConstBlock(uint64_t c):$/;"	f
ConstBlock	yggdrasil/ufarray.py	/^def ConstBlock(v):$/;"	f
ConstDiskArray	yggdrasil/ufarray.py	/^def ConstDiskArray(blk, domain=SizeSort):$/;"	f
ConstString	yggdrasil/ufarray.py	/^def ConstString(size, v):$/;"	f
DATA	yggdrasil/diskspec.py	/^    DATA = 1$/;"	v	class:RangeVirtualTxnDisk
DATA	yggdrasil/diskspec.py	/^    DATA = 2$/;"	v	class:InodeSpec
DATADISK	xv6inode.py	/^    DATADISK = 3$/;"	v	class:InodeDisk
DEBUG	yggdrasil/test.py	/^    DEBUG = False$/;"	v	class:RefinementTest
DentryLookup	diskimpl.pxd	/^cdef class DentryLookup:$/;"	c
DentryLookup	diskimpl.pyx	/^cdef class DentryLookup:$/;"	c
DevSort	yggdrasil/util.py	/^DevSort = BitVecSort(64)$/;"	v
Dict	disk.py	/^Dict = _native(diskimpl.Dict, symbolicmap.SymbolicMap)$/;"	v
Dict	diskimpl.pxd	/^cdef class Dict(object):$/;"	c
Dict	diskimpl.pyx	/^cdef class Dict(object):$/;"	c
DirImpl	dirinode.pxd	/^cdef class DirImpl:$/;"	c
DirImpl	dirinode.py	/^class DirImpl(object):$/;"	c
DirLook	dirspec.py	/^class DirLook(object):$/;"	c
DirRefinement	test_dirspec.py	/^class DirRefinement(test.RefinementTest):$/;"	c
DirRefinementTest	test_dirspec.py	/^class DirRefinementTest(test.RefinementTest):$/;"	c
DirSpec	dirspec.py	/^class DirSpec(object):$/;"	c
Disk	dirinode.py	/^Disk = namedtuple('Disk', ['read', 'write'])$/;"	v
Disk	xv6inode.py	/^Disk = namedtuple('Disk', ['read', 'write'])$/;"	v
DiskArray	yggdrasil/ufarray.py	/^class DiskArray(object):$/;"	c
DiskTest	yggdrasil/test.py	/^class DiskTest(unittest.TestCase):$/;"	c
EmptyString	yggdrasil/ufarray.py	/^def EmptyString():$/;"	f
Exists	test_fsck.pyx	/^class Exists(Quantifier):$/;"	c
Extend	disk.py	/^Extend = _native(diskimpl.Extend, util.Extend)$/;"	v
Extend	diskimpl.pxd	/^cpdef inline uint64_t Extend(uint64_t val, uint64_t size):$/;"	f
Extend	yggdrasil/util.py	/^def Extend(x, size):$/;"	f
Extract	disk.py	/^Extract = _native(diskimpl.Extract, z3.Extract)$/;"	v
Extract	diskimpl.pxd	/^cpdef inline uint64_t Extract(int hi, int lo, uint64_t val):$/;"	f
FREEDISK	xv6inode.py	/^    FREEDISK = 0$/;"	v	class:InodeDisk
FUSE_BUF_FD_RETRY	llfuse.pxd	/^        FUSE_BUF_FD_RETRY = (1 << 3),$/;"	v
FUSE_BUF_FD_SEEK	llfuse.pxd	/^        FUSE_BUF_FD_SEEK = (1 << 2),$/;"	v
FUSE_BUF_IS_FD	llfuse.pxd	/^        FUSE_BUF_IS_FD = (1 << 1),$/;"	v
FlushingDisk	test_diskspec.py	/^class FlushingDisk:$/;"	c
ForAll	test_fsck.pyx	/^class ForAll(Quantifier):$/;"	c
FreshAttr	test_inodepack.py	/^def FreshAttr():$/;"	f
FreshAttr	test_xv6inode.py	/^def FreshAttr():$/;"	f
FreshAttributes	dirspec.py	/^def FreshAttributes():$/;"	f
FreshBitVec	yggdrasil/util.py	/^def FreshBitVec(name, size):$/;"	f
FreshBlock	yggdrasil/ufarray.py	/^def FreshBlock(prefix):$/;"	f
FreshBool	yggdrasil/util.py	/^def FreshBool(b):$/;"	f
FreshDiskArray	yggdrasil/ufarray.py	/^def FreshDiskArray(prefix, domain=SizeSort):$/;"	f
FreshIno	dirspec.py	/^def FreshIno(name):$/;"	f
FreshKey	kvspec.py	/^def FreshKey(prefix):$/;"	f
FreshName	dirspec.py	/^def FreshName(name):$/;"	f
FreshSize	yggdrasil/ufarray.py	/^def FreshSize(prefix, domain=SizeSort):$/;"	f
FreshString	yggdrasil/ufarray.py	/^def FreshString(prefix, size=None):$/;"	f
FreshUFunction	yggdrasil/ufarray.py	/^def FreshUFunction(name, *args, **kwargs):$/;"	f
IExtSpec	test_inode.py	/^class IExtSpec(object):$/;"	c
IFREEDISK	dirinode.py	/^    IFREEDISK =  4$/;"	v	class:DirImpl
INODEDATADISK	xv6inode.py	/^    INODEDATADISK = 2$/;"	v	class:InodeDisk
INODEMETADISK	xv6inode.py	/^    INODEMETADISK = 1$/;"	v	class:InodeDisk
ISpec	test_inode.py	/^class ISpec(object):$/;"	c
ISpecTest	test_inode.py	/^class ISpecTest(test.RefinementTest):$/;"	c
I_OFF_DATA	lfs.py	/^    I_OFF_DATA = 4$/;"	v	class:LFS
I_OFF_MODE	lfs.py	/^    I_OFF_MODE = 1$/;"	v	class:LFS
I_OFF_MTIME	lfs.py	/^    I_OFF_MTIME = 0$/;"	v	class:LFS
If	disk.py	/^If = _native(diskimpl.If, util.If)$/;"	v
If	diskimpl.pxd	/^cpdef inline If(bint cond, a, b):$/;"	f
If	yggdrasil/util.py	/^def If(cond, a, b):$/;"	f
Implies	test_fsck.pyx	/^class Implies(Node):$/;"	c
IndirectInodeDisk	xv6inode.pxd	/^cdef class IndirectInodeDisk:$/;"	c
IndirectInodeDisk	xv6inode.py	/^class IndirectInodeDisk(object):$/;"	c
IndirectInodeDiskRefinement	test_xv6inode.py	/^class IndirectInodeDiskRefinement(test.RefinementTest):$/;"	c
InoSort	dirspec.py	/^InoSort = BitVecSort(32)$/;"	v
InodeDisk	xv6inode.pxd	/^cdef class InodeDisk:$/;"	c
InodeDisk	xv6inode.py	/^class InodeDisk(object):$/;"	c
InodeDiskRefinement	test_xv6inode.py	/^class InodeDiskRefinement(test.RefinementTest):$/;"	c
InodePackDisk	inodepack.pxd	/^cdef class InodePackDisk:$/;"	c
InodePackDisk	inodepack.py	/^class InodePackDisk(object):$/;"	c
InodePackDiskRefinement	test_inodepack.py	/^class InodePackDiskRefinement(RefinementTest):$/;"	c
InodePackSpec	yggdrasil/diskspec.py	/^class InodePackSpec(object):$/;"	c
InodeSpec	yggdrasil/diskspec.py	/^class InodeSpec(MultiTxnDisk):$/;"	c
InodeSpecTest	test_diskspec.py	/^class InodeSpecTest(test.DiskTest):$/;"	c
KEY_SIZE	kvimpl.py	/^    KEY_SIZE = 8$/;"	v	class:KVImpl
KVImpl	kvimpl.py	/^class KVImpl(object):$/;"	c
KVSpec	kvspec.py	/^class KVSpec(object):$/;"	c
KVTest	test_kv.py	/^class KVTest(test.DiskTest):$/;"	c
KeySort	kvspec.py	/^KeySort = BitVecSort(64 * 8)$/;"	v
LDFLAGS	Makefile	/^LDFLAGS=`pkg-config --libs python2` `pkg-config --libs fuse`$/;"	m
LEN_LEN	yggdrasil/solver_utils.py	/^LEN_LEN = 8$/;"	v
LFS	lfs.pxd	/^cdef class LFS:$/;"	c
LFS	lfs.py	/^class LFS(object):$/;"	c
LFSRefinement	test_lfs.py	/^class LFSRefinement(test.RefinementTest):$/;"	c
LFSSpec	test_lfs.py	/^class LFSSpec(object):$/;"	c
LOG_MAX_ENTRIES	waldisk.py	/^    LOG_MAX_ENTRIES = 10$/;"	v	class:WALDisk
LShR	disk.py	/^LShR = _native(diskimpl.LShR, z3.LShR)$/;"	v
LShR	diskimpl.pxd	/^cpdef inline uint64_t LShR(uint64_t a, uint64_t b):$/;"	f
Lambda	test_fsck.pyx	/^class Lambda(Node):$/;"	c
LogBlockSize	yggdrasil/util.py	/^LogBlockSize = BlockSize.bit_length() - 1$/;"	v
LogSpec	logspec.py	/^class LogSpec(object):$/;"	c
LogSpecEntry	logspec.py	/^class LogSpecEntry(object):$/;"	c
MAPPED	yggdrasil/diskspec.py	/^    MAPPED = 0$/;"	v	class:InodeSpec
MAPPED	yggdrasil/diskspec.py	/^    MAPPED = 0$/;"	v	class:RangeVirtualTxnDisk
MAX_NAME_LENGTH	lfs_fuse.pyx	/^MAX_NAME_LENGTH = 8$/;"	v
MODE	inodepack.py	/^    MODE = 2$/;"	v	class:InodePackDisk
MTIME	inodepack.py	/^    MTIME = 1$/;"	v	class:InodePackDisk
Machine	yggdrasil/diskspec.py	/^class Machine(object):$/;"	c
ModelProxy	yggdrasil/solver.py	/^class ModelProxy(object):$/;"	c
MultiTxnDisk	yggdrasil/diskspec.py	/^class MultiTxnDisk(object):$/;"	c
NBLOCKS	dirinode.py	/^    NBLOCKS = 522$/;"	v	class:DirImpl
NDIRECT	xv6inode.py	/^    NDIRECT = 11$/;"	v	class:InodeDisk
NINDIRECT	xv6inode.py	/^    NINDIRECT = 512$/;"	v	class:IndirectInodeDisk
NLINK	inodepack.py	/^    NLINK = 3$/;"	v	class:InodePackDisk
NameSort	dirspec.py	/^NameSort = SizeSort # todo$/;"	v
Node	test_fsck.pyx	/^class Node(object):$/;"	c
Not	disk.py	/^Not = _native(diskimpl.Not, z3.Not)$/;"	v
Not	diskimpl.pxd	/^cpdef inline bint Not(bint cond):$/;"	f
Not	test_fsck.pyx	/^class Not(Node):$/;"	c
OFF	inodepack.py	/^    OFF = 5$/;"	v	class:InodePackDisk
OFF_VALUE_DATA	kvimpl.py	/^    OFF_VALUE_DATA = OFF_VALUE_SIZE + 1$/;"	v	class:KVImpl
OFF_VALUE_SIZE	kvimpl.py	/^    OFF_VALUE_SIZE = KEY_SIZE$/;"	v	class:KVImpl
ORPHANS	dirinode.py	/^    ORPHANS =  5$/;"	v	class:DirImpl
OS	Makefile	/^OS := $(shell uname)$/;"	m
OffsetSort	test_inode.py	/^OffsetSort = BitVecSort(32)$/;"	v
Or	disk.py	/^Or = _native(diskimpl.Or, z3.Or)$/;"	v
Or	diskimpl.pxd	/^cpdef inline bint Or(bint a, bint b):$/;"	f
Orphans	dirinode.py	/^class Orphans(object):$/;"	c
PROFILE	Makefile	/^PROFILE=False$/;"	m
Partition	partition.py	/^class Partition(object):$/;"	c
PartitionAsyncDisk	disk.py	/^PartitionAsyncDisk = diskimpl.PartitionAsyncDisk$/;"	v
PartitionAsyncDisk	diskimpl.pxd	/^cdef class PartitionAsyncDisk:$/;"	c
PartitionAsyncDisk	diskimpl.pyx	/^cdef class PartitionAsyncDisk:$/;"	c
PartitionRefinement	test_partition.py	/^class PartitionRefinement(test.RefinementTest):$/;"	c
PartitionedSizeSort	yggdrasil/util.py	/^PartitionedSizeSort = BitVecSort(SizeSort.size() + DevSort.size())$/;"	v
Quantifier	test_fsck.pyx	/^class Quantifier(Node):$/;"	c
RangeVirtualTxnDisk	yggdrasil/diskspec.py	/^class RangeVirtualTxnDisk(MultiTxnDisk):$/;"	c
RefinementMeta	yggdrasil/test.py	/^class RefinementMeta(type):$/;"	c
RefinementTest	yggdrasil/test.py	/^class RefinementTest(DiskTest):$/;"	c
RemoveFlush	ast-rewrite.py	/^class RemoveFlush(ast.NodeTransformer):$/;"	c
SAEQ	test_fsck.pyx	/^class SAEQ(object):$/;"	c
SAMap	test_fsck.pyx	/^class SAMap(object):$/;"	c
SB_OFF_BALLOC	lfs.py	/^    SB_OFF_BALLOC = 0$/;"	v	class:LFS
SB_OFF_IALLOC	lfs.py	/^    SB_OFF_IALLOC = 1$/;"	v	class:LFS
SB_OFF_IMAP	lfs.py	/^    SB_OFF_IMAP = 2$/;"	v	class:LFS
SIZE	inodepack.py	/^    SIZE = 0$/;"	v	class:InodePackDisk
SUPERBLOCK	lfs.py	/^    SUPERBLOCK = 0$/;"	v	class:LFS
Server	yggdrasil/server.py	/^class Server(object):$/;"	c
SizeSort	yggdrasil/util.py	/^SizeSort  = BitVecSort(64)$/;"	v
Solver	yggdrasil/solver.py	/^class Solver(object):$/;"	c
Stat	disk.py	/^Stat = _native(diskspec.Stat, diskspec.Stat)$/;"	v
Stat	diskimpl.pxd	/^cdef class Stat:$/;"	c
Stat	diskimpl.pyx	/^cdef class Stat:$/;"	c
Stat	yggdrasil/diskspec.py	/^class Stat(object):$/;"	c
StoreIn	test_ufarray.py	/^def StoreIn(arr, bid, off, field):$/;"	f
String	yggdrasil/ufarray.py	/^class String(object):$/;"	c
StringElementSort	yggdrasil/ufarray.py	/^StringElementSort = BlockElementSort$/;"	v
StringOffsetSort	yggdrasil/ufarray.py	/^StringOffsetSort = SizeSort$/;"	v
SymbolicMap	symbolicmap.py	/^class SymbolicMap(object):$/;"	c
SyncDisk	yggdrasil/diskspec.py	/^class SyncDisk:$/;"	c
SyncDiskTest	test_diskspec.py	/^class SyncDiskTest(test.DiskTest):$/;"	c
TenaciousdLogTest	test_tenaciousd.py	/^class TenaciousdLogTest(test.DiskTest):$/;"	c
TestBitmapDisk	test_bitmap.py	/^class TestBitmapDisk(test.RefinementTest):$/;"	c
TxnDisk	yggdrasil/diskspec.py	/^class TxnDisk(object):$/;"	c
UDiv	disk.py	/^UDiv = _native(diskimpl.UDiv, z3.UDiv)$/;"	v
UDiv	diskimpl.pxd	/^cpdef inline uint64_t UDiv(uint64_t a, uint64_t b):$/;"	f
UFunction	yggdrasil/ufarray.py	/^class UFunction(object):$/;"	c
UGE	disk.py	/^UGE = _native(diskimpl.UGE, z3.UGE)$/;"	v
UGE	diskimpl.pxd	/^cpdef inline bint UGE(uint64_t a, uint64_t b):$/;"	f
UGT	disk.py	/^UGT = _native(diskimpl.UGT, z3.UGT)$/;"	v
UGT	diskimpl.pxd	/^cpdef inline bint UGT(uint64_t a, uint64_t b):$/;"	f
ULE	disk.py	/^ULE = _native(diskimpl.ULE, z3.ULE)$/;"	v
ULE	diskimpl.pxd	/^cpdef inline bint ULE(uint64_t a, uint64_t b):$/;"	f
ULT	disk.py	/^ULT = _native(diskimpl.ULT, z3.ULT)$/;"	v
ULT	diskimpl.pxd	/^cpdef inline bint ULT(uint64_t a, uint64_t b):$/;"	f
UMax	disk.py	/^UMax = _native(None, util.UMax)$/;"	v
UMax	yggdrasil/util.py	/^def UMax(a, *args):$/;"	f
UMin	yggdrasil/util.py	/^def UMin(a, *args):$/;"	f
URem	disk.py	/^URem = _native(diskimpl.URem, z3.URem)$/;"	v
URem	diskimpl.pxd	/^cpdef inline uint64_t URem(uint64_t a, uint64_t b):$/;"	f
USub	disk.py	/^USub = _native(diskimpl.USub, lambda a, b: a - b)$/;"	v
USub	diskimpl.pxd	/^cpdef inline uint64_t USub(uint64_t a, uint64_t b):$/;"	f
UpdateIn	test_ufarray.py	/^def UpdateIn(arr, bid, off, field):$/;"	f
VALUE_SIZE_LIMIT	kvimpl.py	/^    VALUE_SIZE_LIMIT = (BlockSize \/ 64) - OFF_VALUE_DATA$/;"	v	class:KVImpl
VirtualAsyncDisk	yggdrasil/diskspec.py	/^class VirtualAsyncDisk(AsyncDisk):$/;"	c
VirtualAsyncDiskTest	test_diskspec.py	/^class VirtualAsyncDiskTest(test.RefinementTest):$/;"	c
WALDisk	waldisk.pxd	/^cdef class WALDisk:$/;"	c
WALDisk	waldisk.py	/^class WALDisk(object):$/;"	c
WALDiskTestRefinement	test_waldisk.py	/^class WALDiskTestRefinement(test.RefinementTest):$/;"	c
Z3_LIBRARY_PATH	yggdrasil/util.py	/^Z3_LIBRARY_PATH = os.environ.get('Z3_LIBRARY_PATH')$/;"	v
Z3_SERVER_FILE	yggdrasil/solver.py	/^Z3_SERVER_FILE = os.path.join(CURRENT, "server.py")$/;"	v
ZConcat32	disk.py	/^def ZConcat32(a, b):$/;"	f
_UNUSED	inodepack.py	/^    _UNUSED = 4$/;"	v	class:InodePackDisk
__all__	bitmap.py	/^__all__ = ['BitmapDisk']$/;"	v
__all__	waldisk.py	/^__all__ = ['WALDisk']$/;"	v
__all__	xv6inode.py	/^__all__ = ['InodeDisk', 'IndirectInodeDisk']$/;"	v
__call__	test_fsck.pyx	/^    def __call__(self, arg):$/;"	m	class:SAMap
__call__	yggdrasil/ufarray.py	/^    def __call__(self, *key):$/;"	m	class:UFunction
__call__	yggdrasil/ufarray.py	/^    def __call__(self, key):$/;"	m	class:DiskArray
__cinit__	diskimpl.pyx	/^    def __cinit__(self, AsyncDisk adisk, uint64_t start, uint64_t end, bint debug):$/;"	m	class:PartitionAsyncDisk
__cinit__	diskimpl.pyx	/^    def __cinit__(self, char* fn, mode_t mode=O_RDWR):$/;"	m	class:AsyncDisk
__cinit__	diskimpl.pyx	/^    def __cinit__(self, int size):$/;"	m	class:Block
__commit	waldisk.pxd	/^    cpdef void __commit(self)$/;"	m	class:WALDisk	file:
__commit	waldisk.py	/^    def __commit(self):$/;"	m	class:WALDisk	file:
__dealloc__	diskimpl.pyx	/^    def __dealloc__(self):$/;"	m	class:AsyncDisk
__dealloc__	diskimpl.pyx	/^    def __dealloc__(self):$/;"	m	class:Block
__eq__	test_fsck.pyx	/^    def __eq__(self, value):$/;"	m	class:SAEQ
__eq__	yggdrasil/diskspec.py	/^    def __eq__(self, other):$/;"	m	class:Stat
__eq__	yggdrasil/ufarray.py	/^    def __eq__(self, other):$/;"	m	class:Block
__eq__	yggdrasil/ufarray.py	/^    def __eq__(self, other):$/;"	m	class:String
__fresh_bool	yggdrasil/diskspec.py	/^    def __fresh_bool(self, name):$/;"	m	class:Machine	file:
__getitem__	diskimpl.pyx	/^    def __getitem__(self, int v):$/;"	m	class:Block
__getitem__	logspec.py	/^    def __getitem__(self, k):$/;"	m	class:LogSpec
__getitem__	logspec.py	/^    def __getitem__(self, off):$/;"	m	class:LogSpecEntry
__getitem__	test_fsck.pyx	/^    def __getitem__(self, arg):$/;"	m	class:SAMap
__getitem__	yggdrasil/diskspec.py	/^    def __getitem__(self, idx):$/;"	m	class:Stat
__getitem__	yggdrasil/ufarray.py	/^    def __getitem__(self, key):$/;"	m	class:Block
__getitem__	yggdrasil/ufarray.py	/^    def __getitem__(self, off):$/;"	m	class:String
__init__	ast-rewrite.py	/^    def __init__(self, root, *args, **kwargs):$/;"	m	class:RemoveFlush
__init__	bitmap.py	/^    def __init__(self, disk):$/;"	m	class:BitmapDisk
__init__	dirinode.py	/^    def __init__(self, orphandisk):$/;"	m	class:Orphans
__init__	dirinode.py	/^    def __init__(self, txndisk, inode, Allocator, Bitmap, DirLookup):$/;"	m	class:DirImpl
__init__	dirspec.py	/^    def __init__(self, bsizefn, fsizefn, mtimefn, modefn, nlinkfn):$/;"	m	class:Attributes
__init__	dirspec.py	/^    def __init__(self, inode):$/;"	m	class:DirLook
__init__	dirspec.py	/^    def __init__(self, mach, dirfn, direxists, datafn, ifreefn, attrs):$/;"	m	class:DirSpec
__init__	diskimpl.pyx	/^    def __init__(self):$/;"	m	class:Dict
__init__	diskimpl.pyx	/^    def __init__(self,  uint64_t size, uint64_t mtime, uint64_t mode, uint64_t nlink):$/;"	m	class:Stat
__init__	diskimpl.pyx	/^    def __init__(self, inode):$/;"	m	class:DentryLookup
__init__	diskimpl.pyx	/^    def __init__(self, readfn, startblock, endblock):$/;"	m	class:Allocator
__init__	inodepack.py	/^    def __init__(self, metadisk, datadisk):$/;"	m	class:InodePackDisk
__init__	kvimpl.py	/^    def __init__(self, disk, hashfn):$/;"	m	class:KVImpl
__init__	kvspec.py	/^    def __init__(self, mach, fn_size, fn_data):$/;"	m	class:KVSpec
__init__	lfs.py	/^    def __init__(self, disk):$/;"	m	class:LFS
__init__	logspec.py	/^    def __init__(self, data, size):$/;"	m	class:LogSpecEntry
__init__	logspec.py	/^    def __init__(self, mach, datafn, sizefn, nextfn, tail):$/;"	m	class:LogSpec
__init__	partition.py	/^    def __init__(self, disk, start, end):$/;"	m	class:Partition
__init__	symbolicmap.py	/^    def __init__(self):$/;"	m	class:SymbolicMap
__init__	test_cp.py	/^    def __init__(self, di):$/;"	m	class:CPImpl
__init__	test_cp.py	/^    def __init__(self, ds):$/;"	m	class:CPSpec
__init__	test_diskspec.py	/^    def __init__(self, disk):$/;"	m	class:FlushingDisk
__init__	test_fsck.pyx	/^    def __init__(self):$/;"	m	class:SAMap
__init__	test_fsck.pyx	/^    def __init__(self, *children):$/;"	m	class:And
__init__	test_fsck.pyx	/^    def __init__(self, A, B):$/;"	m	class:Implies
__init__	test_fsck.pyx	/^    def __init__(self, bindings, expression):$/;"	m	class:Quantifier
__init__	test_fsck.pyx	/^    def __init__(self, child):$/;"	m	class:Not
__init__	test_fsck.pyx	/^    def __init__(self, fn):$/;"	m	class:Lambda
__init__	test_fsck.pyx	/^    def __init__(self, map, arg):$/;"	m	class:SAEQ
__init__	test_inode.py	/^    def __init__(self, dat, ext):$/;"	m	class:IExtSpec
__init__	test_inode.py	/^    def __init__(self, idisk, freedisk, Bitmap, Allocator):$/;"	m	class:BlockImpl
__init__	test_inode.py	/^    def __init__(self, start, end):$/;"	m	class:ISpec
__init__	test_lfs.py	/^    def __init__(self, mach, dirfn, parentfn, modefn, mtimefn):$/;"	m	class:LFSSpec
__init__	waldisk.py	/^    def __init__(self, logdisk, datadisks, osync=True):$/;"	m	class:WALDisk
__init__	xv6inode.py	/^    def __init__(self, idisk):$/;"	m	class:IndirectInodeDisk
__init__	xv6inode.py	/^    def __init__(self, txndisk, Allocator, Bitmap, Inode):$/;"	m	class:InodeDisk
__init__	yggdrasil/diskspec.py	/^    def __init__(self):$/;"	m	class:Machine
__init__	yggdrasil/diskspec.py	/^    def __init__(self, _readfn, _start, _end):$/;"	m	class:Allocator32
__init__	yggdrasil/diskspec.py	/^    def __init__(self, _readfn, _start, _end):$/;"	m	class:Allocator64
__init__	yggdrasil/diskspec.py	/^    def __init__(self, disk):$/;"	m	class:BitmapSpec
__init__	yggdrasil/diskspec.py	/^    def __init__(self, mach, disk):$/;"	m	class:SyncDisk
__init__	yggdrasil/diskspec.py	/^    def __init__(self, mach, disk):$/;"	m	class:TxnDisk
__init__	yggdrasil/diskspec.py	/^    def __init__(self, mach, disk, cache=None):$/;"	m	class:AsyncDisk
__init__	yggdrasil/diskspec.py	/^    def __init__(self, mach, disks):$/;"	m	class:MultiTxnDisk
__init__	yggdrasil/diskspec.py	/^    def __init__(self, mach, mapped, disk):$/;"	m	class:VirtualAsyncDisk
__init__	yggdrasil/diskspec.py	/^    def __init__(self, metadisk, datadisk):$/;"	m	class:InodePackSpec
__init__	yggdrasil/diskspec.py	/^    def __init__(self, size, mtime, mode, nlink=0):$/;"	m	class:Stat
__init__	yggdrasil/diskspec.py	/^    def __init__(self, start, end, *args, **kwargs):$/;"	m	class:RangeVirtualTxnDisk
__init__	yggdrasil/server.py	/^    def __init__(self):$/;"	m	class:Server
__init__	yggdrasil/solver.py	/^    def __init__(self):$/;"	m	class:Solver
__init__	yggdrasil/solver.py	/^    def __init__(self, model_str, solver):$/;"	m	class:ModelProxy
__init__	yggdrasil/test.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:DiskTest
__init__	yggdrasil/ufarray.py	/^    def __init__(self, fn):$/;"	m	class:Block
__init__	yggdrasil/ufarray.py	/^    def __init__(self, fn, domain=SizeSort):$/;"	m	class:DiskArray
__init__	yggdrasil/ufarray.py	/^    def __init__(self, name, *args, **kwargs):$/;"	m	class:UFunction
__init__	yggdrasil/ufarray.py	/^    def __init__(self, size, data):$/;"	m	class:String
__metaclass__	yggdrasil/test.py	/^    __metaclass__ = RefinementMeta$/;"	v	class:RefinementTest	file:
__ne__	yggdrasil/ufarray.py	/^    def __ne__(self, other):$/;"	m	class:Block
__ne__	yggdrasil/ufarray.py	/^    def __ne__(self, other):$/;"	m	class:String
__new__	yggdrasil/test.py	/^    def __new__(cls, name, parents, dct):$/;"	m	class:RefinementMeta
__recover	waldisk.py	/^    def __recover(self):$/;"	m	class:WALDisk	file:
__repr__	yggdrasil/solver.py	/^    def __repr__(self):$/;"	m	class:ModelProxy
__setitem__	diskimpl.pyx	/^    def __setitem__(self, int v, uint64_t k):$/;"	m	class:Block
__setitem__	diskimpl.pyx	/^    def __setitem__(self, key, value):$/;"	m	class:Dict
__setitem__	symbolicmap.py	/^    def __setitem__(self, key, value):$/;"	m	class:SymbolicMap
__setitem__	test_fsck.pyx	/^    def __setitem__(self, arg, value):$/;"	m	class:SAMap
__setitem__	yggdrasil/ufarray.py	/^    def __setitem__(self, key, val):$/;"	m	class:Block
__str__	diskimpl.pyx	/^    def __str__(self):$/;"	m	class:Stat
__str__	test_fsck.pyx	/^    def __str__(self):$/;"	m	class:SAMap
__str__	yggdrasil/diskspec.py	/^    def __str__(self):$/;"	m	class:Stat
__str__	yggdrasil/solver.py	/^    def __str__(self):$/;"	m	class:ModelProxy
__test_atomic	test_waldisk.py	/^    def __test_atomic(self, n):$/;"	m	class:WALDiskTestRefinement	file:
_alloc	diskimpl.pxd	/^    cdef uint64_t _alloc(self, uint64_t i, Block block) nogil$/;"	m	class:Allocator
_alloc	diskimpl.pyx	/^    cdef uint64_t _alloc(self, uint64_t i, Block block) nogil:$/;"	m	class:Allocator
_balloc	lfs.py	/^    def _balloc(self):$/;"	m	class:LFS
_begin	lfs.py	/^    def _begin(self):$/;"	m	class:LFS
_call	yggdrasil/solver.py	/^    def _call(self, name, *args, **kwargs):$/;"	m	class:Solver
_check_pre	yggdrasil/test.py	/^    def _check_pre(self, fname, fn):$/;"	m	class:RefinementTest
_commit	lfs.py	/^    def _commit(self, write=True):$/;"	m	class:LFS
_create_bid	test_xv6inode.py	/^    def _create_bid(self):$/;"	m	class:IndirectInodeDiskRefinement
_create_bid	test_xv6inode.py	/^    def _create_bid(self):$/;"	m	class:InodeDiskRefinement
_create_dir	test_cp.py	/^    def _create_dir(self, mach):$/;"	m	class:CPRefinement
_curr	xv6inode.py	/^_curr = 0$/;"	v
_debug	yggdrasil/test.py	/^    def _debug(self, *args, **kwargs):$/;"	m	class:RefinementTest
_gen_iov	test_waldisk.py	/^    def _gen_iov(self, *args, **kwargs):$/;"	m	class:WALDiskTestRefinement
_get_map	lfs.py	/^    def _get_map(self, ino):$/;"	m	class:LFS
_get_mapping	inodepack.py	/^    def _get_mapping(self, ino, off, block=None):$/;"	m	class:InodePackDisk
_ialloc	lfs.py	/^    def _ialloc(self):$/;"	m	class:LFS
_match_fn	yggdrasil/test.py	/^    def _match_fn(self, fname, fn, crash):$/;"	m	class:RefinementTest
_native	disk.py	/^def _native(a, b):$/;"	f
_nop_fn	yggdrasil/test.py	/^    def _nop_fn(self, fname, fn, crash):$/;"	m	class:RefinementTest
_print	diskimpl.pyx	/^    def _print(self):$/;"	m	class:Block
_print	yggdrasil/ufarray.py	/^    def _print(self, num=None):$/;"	m	class:Block
_read	test_inode.py	/^    def _read(self, *args, **kwargs):$/;"	m	class:IExtSpec
_read	test_inode.py	/^    def _read(self, block):$/;"	m	class:BlockImpl
_read	test_inode.py	/^    def _read(self, block):$/;"	m	class:ISpec
_read	waldisk.py	/^    def _read(self, dev, bid):$/;"	m	class:WALDisk
_read	yggdrasil/diskspec.py	/^    def _read(self, *args, **kwargs):$/;"	m	class:InodeSpec
_read	yggdrasil/server.py	/^    def _read(self):$/;"	m	class:Server
_read	yggdrasil/solver.py	/^    def _read(self, **kwargs):$/;"	m	class:Solver
_run	yggdrasil/test.py	/^    def _run(self, q, result):$/;"	m	class:DiskTest
_set_map	lfs.py	/^    def _set_map(self, ino, bid):$/;"	m	class:LFS
_solve	yggdrasil/test.py	/^    def _solve(self, *args, **keywords):$/;"	m	class:DiskTest
_write	test_inode.py	/^    def _write(self, *args, **kwargs):$/;"	m	class:IExtSpec
_write	test_inode.py	/^    def _write(self, block, data):$/;"	m	class:BlockImpl
_write	test_inode.py	/^    def _write(self, block, value):$/;"	m	class:ISpec
_write	yggdrasil/diskspec.py	/^    def _write(self, synced, bid, data, guard=BoolVal(True)):$/;"	m	class:AsyncDisk
_write	yggdrasil/server.py	/^    def _write(self, command):$/;"	m	class:Server
_write	yggdrasil/solver.py	/^    def _write(self, command):$/;"	m	class:Solver
_z3	test_fsck.pyx	/^    def _z3(self, *args, **kwargs):$/;"	m	class:Exists
_z3	test_fsck.pyx	/^    def _z3(self, *args, **kwargs):$/;"	m	class:ForAll
add	yggdrasil/server.py	/^    def add(self, term):$/;"	m	class:Server
add	yggdrasil/solver.py	/^    def add(self, *terms):$/;"	m	class:Solver
add_control	yggdrasil/diskspec.py	/^    def add_control(self, c):$/;"	m	class:Machine
all	Makefile	/^all: diskimpl.so yav_dirimpl_fuse.so$/;"	t
alloc	diskimpl.pxd	/^    cpdef uint64_t alloc(self)$/;"	m	class:Allocator
alloc	diskimpl.pyx	/^    cpdef uint64_t alloc(self):$/;"	m	class:Allocator
alloc	test_inode.py	/^    def alloc(self):$/;"	m	class:ISpec
alloc	test_inode.py	/^    def alloc(self, *args, **kwargs):$/;"	m	class:IExtSpec
alloc	xv6inode.pxd	/^    cdef uint64_t alloc(self)$/;"	m	class:InodeDisk
alloc	xv6inode.py	/^    def alloc(self):$/;"	m	class:InodeDisk
alloc	yggdrasil/diskspec.py	/^    def alloc(self):$/;"	m	class:Allocator32
alloc	yggdrasil/diskspec.py	/^    def alloc(self):$/;"	m	class:Allocator64
append	dirinode.py	/^    def append(self, value):$/;"	m	class:Orphans
append	logspec.py	/^    def append(self, data, size):$/;"	m	class:LogSpec
assertion	disk.py	/^def assertion(cond, msg=None):$/;"	f
assertion	diskimpl.pxd	/^cpdef void assertion(bint b, object msg=*)$/;"	f
assertion	diskimpl.pyx	/^cpdef void assertion(bint b, object msg=None):$/;"	f
assumption	yggdrasil/diskspec.py	/^    def assumption(self):$/;"	m	class:Machine
assumption	yggdrasil/test.py	/^    def assumption(self, name, spec_mach, impl_mach):$/;"	m	class:RefinementTest
attr_eq	test_xv6inode.py	/^def attr_eq(a, b):$/;"	f
bbf	yggdrasil/util.py	/^def bbf(p, start, end):$/;"	f
begin_tx	waldisk.pxd	/^    cpdef void begin_tx(self)$/;"	m	class:WALDisk
begin_tx	waldisk.py	/^    def begin_tx(self):$/;"	m	class:WALDisk
begin_tx	xv6inode.pxd	/^    cdef void begin_tx(self)$/;"	m	class:IndirectInodeDisk
begin_tx	xv6inode.pxd	/^    cdef void begin_tx(self)$/;"	m	class:InodeDisk
begin_tx	xv6inode.py	/^    def begin_tx(self):$/;"	m	class:IndirectInodeDisk
begin_tx	xv6inode.py	/^    def begin_tx(self):$/;"	m	class:InodeDisk
begin_tx	yggdrasil/diskspec.py	/^    def begin_tx(self):$/;"	m	class:MultiTxnDisk
begin_tx	yggdrasil/diskspec.py	/^    def begin_tx(self):$/;"	m	class:TxnDisk
block_extend	yggdrasil/util.py	/^def block_extend(d):$/;"	f
bmap	test_inode.py	/^    def bmap(self, *args, **kwargs):$/;"	m	class:IExtSpec
bmap	test_inode.py	/^    def bmap(self, ino, off):$/;"	m	class:BlockImpl
bmap	test_inode.py	/^    def bmap(self, ino, off):$/;"	m	class:ISpec
bmap	xv6inode.pxd	/^    cdef uint64_t bmap(self, uint64_t vbn)$/;"	m	class:IndirectInodeDisk
bmap	xv6inode.pxd	/^    cdef uint64_t bmap(self, uint64_t vbn)$/;"	m	class:InodeDisk
bmap	xv6inode.py	/^    def bmap(self, vbn):$/;"	m	class:IndirectInodeDisk
bmap	xv6inode.py	/^    def bmap(self, vbn):$/;"	m	class:InodeDisk
bmap	yggdrasil/diskspec.py	/^    def bmap(self, vbn):$/;"	m	class:InodeSpec
bmap	yggdrasil/diskspec.py	/^    def bmap(self, vbn):$/;"	m	class:RangeVirtualTxnDisk
bmap	yggdrasil/diskspec.py	/^    def bmap(self, vbn, val=1):$/;"	m	class:VirtualAsyncDisk
bsize	dirspec.py	/^    def bsize(self, ino):$/;"	m	class:Attributes
bsize	diskimpl.pyx	/^    def bsize(self):$/;"	m	class:Stat
bsize	yggdrasil/diskspec.py	/^    def bsize(self):$/;"	m	class:Stat
bunmap	test_inode.py	/^    def bunmap(self, *args, **kwargs):$/;"	m	class:IExtSpec
bunmap	test_inode.py	/^    def bunmap(self, ino, off):$/;"	m	class:ISpec
bunmap	xv6inode.pxd	/^    cdef void bunmap(self, uint64_t vbn)$/;"	m	class:IndirectInodeDisk
bunmap	xv6inode.pxd	/^    cdef void bunmap(self, uint64_t vbn)$/;"	m	class:InodeDisk
bunmap	xv6inode.py	/^    def bunmap(self, vbn):$/;"	m	class:IndirectInodeDisk
bunmap	xv6inode.py	/^    def bunmap(self, vbn):$/;"	m	class:InodeDisk
bunmap	yggdrasil/diskspec.py	/^    def bunmap(self, bid):$/;"	m	class:VirtualAsyncDisk
bunmap	yggdrasil/diskspec.py	/^    def bunmap(self, vbn):$/;"	m	class:InodeSpec
bunmap	yggdrasil/diskspec.py	/^    def bunmap(self, vbn):$/;"	m	class:RangeVirtualTxnDisk
call_mknod	test_dirspec.py	/^    def call_mknod(self, spec, impl, args):$/;"	m	class:DirRefinementTest
call_rmdir	test_dirspec.py	/^    def call_rmdir(self, spec, impl, args):$/;"	m	class:DirRefinementTest
call_unlink	test_dirspec.py	/^    def call_unlink(self, spec, impl, args):$/;"	m	class:DirRefinementTest
call_write	test_partition.py	/^    def call_write(self, spec, impl, args):$/;"	m	class:PartitionRefinement
call_write_tx	test_waldisk.py	/^    def call_write_tx(self, spec, impl, args):$/;"	m	class:WALDiskTestRefinement
call_write_tx_nocommit	test_waldisk.py	/^    def call_write_tx_nocommit(self, spec, impl, args):$/;"	m	class:WALDiskTestRefinement
check	yggdrasil/server.py	/^    def check(self):$/;"	m	class:Server
check	yggdrasil/solver.py	/^    def check(self):$/;"	m	class:Solver
clean	Makefile	/^clean:$/;"	t
clear	dirinode.py	/^    def clear(self, idx):$/;"	m	class:Orphans
clear_dentry	dirinode.pxd	/^    cdef void clear_dentry(self, Block block, uint64_t off)$/;"	m	class:DirImpl
clear_dentry	dirinode.py	/^    def clear_dentry(self, block, off):$/;"	m	class:DirImpl
cmain	lfs_fuse.pyx	/^cdef int cmain(int argc, char **argv):$/;"	f
cmain	yav_dirimpl_fuse.pyx	/^cdef int cmain(int argc, char **argv):$/;"	f
commit_tx	waldisk.pxd	/^    cpdef void commit_tx(self, bint force=*)$/;"	m	class:WALDisk
commit_tx	waldisk.py	/^    def commit_tx(self, force=False):$/;"	m	class:WALDisk
commit_tx	xv6inode.pxd	/^    cdef void commit_tx(self)$/;"	m	class:IndirectInodeDisk
commit_tx	xv6inode.pxd	/^    cdef void commit_tx(self)$/;"	m	class:InodeDisk
commit_tx	xv6inode.py	/^    def commit_tx(self):$/;"	m	class:IndirectInodeDisk
commit_tx	xv6inode.py	/^    def commit_tx(self):$/;"	m	class:InodeDisk
commit_tx	yggdrasil/diskspec.py	/^    def commit_tx(self):$/;"	m	class:MultiTxnDisk
commit_tx	yggdrasil/diskspec.py	/^    def commit_tx(self):$/;"	m	class:TxnDisk
control	yggdrasil/diskspec.py	/^    def control(self):$/;"	m	class:Machine
copy	diskimpl.pxd	/^    cpdef Block copy(self)$/;"	m	class:Block
copy	diskimpl.pyx	/^    cpdef Block copy(self):$/;"	m	class:Block
cp	test_cp.py	/^    def cp(self, sparent, sname, dparent, dname):$/;"	m	class:CPImpl
cp	test_cp.py	/^    def cp(self, sparent, sname, dparent, dname):$/;"	m	class:CPSpec
crash	bitmap.py	/^    def crash(self, mach):$/;"	m	class:BitmapDisk
crash	dirinode.py	/^    def crash(self, mach):$/;"	m	class:DirImpl
crash	dirspec.py	/^    def crash(self, mach):$/;"	m	class:DirSpec
crash	inodepack.py	/^    def crash(self, mach):$/;"	m	class:InodePackDisk
crash	kvimpl.py	/^    def crash(self, mach):$/;"	m	class:KVImpl
crash	kvspec.py	/^    def crash(self, mach):$/;"	m	class:KVSpec
crash	lfs.py	/^    def crash(self, mach):$/;"	m	class:LFS
crash	logspec.py	/^    def crash(self, mach):$/;"	m	class:LogSpec
crash	partition.py	/^    def crash(self, mach):$/;"	m	class:Partition
crash	test_diskspec.py	/^    def crash(self, mach):$/;"	m	class:FlushingDisk
crash	test_inode.py	/^    def crash(self, *args, **kwargs):$/;"	m	class:BlockImpl
crash	test_inode.py	/^    def crash(self, *args, **kwargs):$/;"	m	class:IExtSpec
crash	test_lfs.py	/^    def crash(self, mach):$/;"	m	class:LFSSpec
crash	test_partition.py	/^    def crash(self, p):$/;"	m	class:PartitionRefinement
crash	waldisk.py	/^    def crash(self, mach):$/;"	m	class:WALDisk
crash	xv6inode.py	/^    def crash(self, mach):$/;"	m	class:IndirectInodeDisk
crash	xv6inode.py	/^    def crash(self, mach):$/;"	m	class:InodeDisk
crash	yggdrasil/diskspec.py	/^    def crash(self, mach):$/;"	m	class:AsyncDisk
crash	yggdrasil/diskspec.py	/^    def crash(self, mach):$/;"	m	class:BitmapSpec
crash	yggdrasil/diskspec.py	/^    def crash(self, mach):$/;"	m	class:InodePackSpec
crash	yggdrasil/diskspec.py	/^    def crash(self, mach):$/;"	m	class:MultiTxnDisk
crash	yggdrasil/diskspec.py	/^    def crash(self, mach):$/;"	m	class:RangeVirtualTxnDisk
crash	yggdrasil/diskspec.py	/^    def crash(self, mach):$/;"	m	class:SyncDisk
crash	yggdrasil/diskspec.py	/^    def crash(self, mach):$/;"	m	class:TxnDisk
crash	yggdrasil/diskspec.py	/^    def crash(self, mach):$/;"	m	class:VirtualAsyncDisk
crash_impl	test_partition.py	/^    crash_impl = crash$/;"	v	class:PartitionRefinement
crash_spec	test_partition.py	/^    crash_spec = crash$/;"	v	class:PartitionRefinement
create_fuse_inode	xv6inode.py	/^def create_fuse_inode(args):$/;"	f
create_impl	test_bitmap.py	/^    def create_impl(self, mach):$/;"	m	class:TestBitmapDisk
create_impl	test_cp.py	/^    def create_impl(self, mach):$/;"	m	class:CPRefinement
create_impl	test_dirspec.py	/^    def create_impl(self, mach):$/;"	m	class:DirRefinement
create_impl	test_dirspec.py	/^    def create_impl(self, mach):$/;"	m	class:DirRefinementTest
create_impl	test_diskspec.py	/^    def create_impl(self, mach):$/;"	m	class:VirtualAsyncDiskTest
create_impl	test_inode.py	/^    def create_impl(self, mach):$/;"	m	class:ISpecTest
create_impl	test_inodepack.py	/^    def create_impl(self, mach):$/;"	m	class:InodePackDiskRefinement
create_impl	test_lfs.py	/^    def create_impl(self, mach):$/;"	m	class:LFSRefinement
create_impl	test_partition.py	/^    def create_impl(self, mach):$/;"	m	class:PartitionRefinement
create_impl	test_waldisk.py	/^    def create_impl(self, mach, logarray=None):$/;"	m	class:WALDiskTestRefinement
create_impl	test_xv6inode.py	/^    def create_impl(self, mach):$/;"	m	class:IndirectInodeDiskRefinement
create_impl	test_xv6inode.py	/^    def create_impl(self, mach):$/;"	m	class:InodeDiskRefinement
create_lfs	lfs.py	/^def create_lfs(*args):$/;"	f
create_on	yggdrasil/diskspec.py	/^    def create_on(self, syncs):$/;"	m	class:Machine
create_partition	xv6inode.py	/^def create_partition(disk, size, debug=False):$/;"	f
create_spec	test_bitmap.py	/^    def create_spec(self, mach):$/;"	m	class:TestBitmapDisk
create_spec	test_cp.py	/^    def create_spec(self, mach):$/;"	m	class:CPRefinement
create_spec	test_dirspec.py	/^    def create_spec(self, mach):$/;"	m	class:DirRefinement
create_spec	test_dirspec.py	/^    def create_spec(self, mach):$/;"	m	class:DirRefinementTest
create_spec	test_diskspec.py	/^    def create_spec(self, mach):$/;"	m	class:VirtualAsyncDiskTest
create_spec	test_inode.py	/^    def create_spec(self, mach):$/;"	m	class:ISpecTest
create_spec	test_inodepack.py	/^    def create_spec(self, mach):$/;"	m	class:InodePackDiskRefinement
create_spec	test_lfs.py	/^    def create_spec(self, mach):$/;"	m	class:LFSRefinement
create_spec	test_partition.py	/^    def create_spec(self, mach):$/;"	m	class:PartitionRefinement
create_spec	test_waldisk.py	/^    def create_spec(self, mach):$/;"	m	class:WALDiskTestRefinement
create_spec	test_xv6inode.py	/^    def create_spec(self, mach):$/;"	m	class:IndirectInodeDiskRefinement
create_spec	test_xv6inode.py	/^    def create_spec(self, mach):$/;"	m	class:InodeDiskRefinement
create_synced	yggdrasil/diskspec.py	/^    def create_synced(self):$/;"	m	class:Machine
data	kvspec.py	/^        data = lambda off, fn=self._fn_data: substitute(fn(key, off), m)$/;"	f	member:KVSpec.get	file:
data	logspec.py	/^        data = lambda off, datafn=self._datafn: substitute(datafn(k, off), *m)$/;"	f	member:LogSpec.__getitem__	file:
data	yggdrasil/ufarray.py	/^        data = lambda off, fn=self._fn: If(ULT(off, size), fn(Extract(BlockOffsetSort.size() - 1/;"	f	member:Block.getrange	file:
data	yggdrasil/ufarray.py	/^        data = lambda off: If(cond, self[off], other[off])$/;"	f	member:String.ite	file:
debug	disk.py	/^def debug(msg, *var):$/;"	f
decorator	yggdrasil/test.py	/^    def decorator(fn):$/;"	f	function:z3_option	file:
delete	kvimpl.py	/^    def delete(self, key):$/;"	m	class:KVImpl
dir_find_empty	lfs.py	/^    def dir_find_empty(self, blk):$/;"	m	class:LFS
dir_lookup	lfs.py	/^    def dir_lookup(self, blk, name):$/;"	m	class:LFS
dirbuf_add	lfs_fuse.pyx	/^cdef void dirbuf_add(fuse_req_t req, dirbuf *b, const char *name, fuse_ino_t ino):$/;"	f
dirbuf_add	yav_dirimpl_fuse.pyx	/^cdef void dirbuf_add(fuse_req_t req, dirbuf *b, const char *name, fuse_ino_t ino):$/;"	f
domain	yggdrasil/diskspec.py	/^    def domain(self):$/;"	m	class:AsyncDisk
domain	yggdrasil/diskspec.py	/^    def domain(self):$/;"	m	class:TxnDisk
domain	yggdrasil/diskspec.py	/^    def domain(self, dev):$/;"	m	class:MultiTxnDisk
domain	yggdrasil/ufarray.py	/^    def domain(self):$/;"	m	class:DiskArray
done	test_fsck.pyx	/^    def done(self):$/;"	m	class:Exists
done	test_fsck.pyx	/^    def done(self):$/;"	m	class:ForAll
ebmap	test_inode.py	/^    def ebmap(self, *args, **kwargs):$/;"	m	class:IExtSpec
ebunmap	test_inode.py	/^    def ebunmap(self, *args, **kwargs):$/;"	m	class:IExtSpec
enable_symbolic_execution	yggdrasil/test.py	/^    def enable_symbolic_execution(self):$/;"	m	class:DiskTest
equivalence	test_bitmap.py	/^    def equivalence(self, spec, impl, *args, **kwargs):$/;"	m	class:TestBitmapDisk
equivalence	test_dirspec.py	/^    def equivalence(self, spec, impl, **kwargs):$/;"	m	class:DirRefinementTest
equivalence	test_diskspec.py	/^    def equivalence(self, spec, impl, **kwargs):$/;"	m	class:VirtualAsyncDiskTest
equivalence	test_inode.py	/^    def equivalence(self, spec, impl, **kwargs):$/;"	m	class:ISpecTest
equivalence	test_inodepack.py	/^    def equivalence(self, spec, impl, **args):$/;"	m	class:InodePackDiskRefinement
equivalence	test_partition.py	/^    def equivalence(self, spec, impl, **kwargs):$/;"	m	class:PartitionRefinement
equivalence	test_waldisk.py	/^    equivalence = equivalence_volatile$/;"	v	class:WALDiskTestRefinement
equivalence_durable	test_waldisk.py	/^    def equivalence_durable(self, spec, impl, **kwargs):$/;"	m	class:WALDiskTestRefinement
equivalence_volatile	test_waldisk.py	/^    def equivalence_volatile(self, spec, impl, **kwargs):$/;"	m	class:WALDiskTestRefinement
eread	test_inode.py	/^    def eread(self, *args, **kwargs):$/;"	m	class:IExtSpec
eval	test_fsck.pyx	/^    def eval(self, *args, **kwargs):$/;"	m	class:And
eval	test_fsck.pyx	/^    def eval(self, *args, **kwargs):$/;"	m	class:Implies
eval	test_fsck.pyx	/^    def eval(self, *args, **kwargs):$/;"	m	class:Lambda
eval	test_fsck.pyx	/^    def eval(self, *args, **kwargs):$/;"	m	class:Not
eval	test_fsck.pyx	/^    def eval(self, *args, **kwargs):$/;"	m	class:Quantifier
eval	yggdrasil/solver.py	/^    def eval(self, term):$/;"	m	class:ModelProxy
eval1	test_fsck.pyx	/^    def eval1(self, *args, **kwargs):$/;"	m	class:Quantifier
evalexp	test_fsck.pyx	/^def evalexp(v, *args, **kwargs):$/;"	f
evaluate	yggdrasil/solver.py	/^    def evaluate(self, term):$/;"	m	class:ModelProxy
ewrite	test_inode.py	/^    def ewrite(self, *args, **kwargs):$/;"	m	class:IExtSpec
exists	lfs.py	/^    def exists(self, parent, name):$/;"	m	class:LFS
explain	yggdrasil/diskspec.py	/^    def explain(self, model):$/;"	m	class:Machine
files	verify.py	/^files = [$/;"	v
flush	diskimpl.pxd	/^    cpdef void flush(self)$/;"	m	class:AsyncDisk
flush	diskimpl.pxd	/^    cpdef void flush(self)$/;"	m	class:PartitionAsyncDisk
flush	diskimpl.pyx	/^    cpdef void flush(self):$/;"	m	class:AsyncDisk
flush	diskimpl.pyx	/^    cpdef void flush(self):$/;"	m	class:PartitionAsyncDisk
flush	partition.py	/^    def flush(self):$/;"	m	class:Partition
flush	test_diskspec.py	/^    def flush(self):$/;"	m	class:FlushingDisk
flush	waldisk.pxd	/^    cpdef void flush(self)$/;"	m	class:WALDisk
flush	waldisk.py	/^    def flush(self):$/;"	m	class:WALDisk
flush	yggdrasil/diskspec.py	/^    def flush(self):$/;"	m	class:AsyncDisk
flush	yggdrasil/diskspec.py	/^    def flush(self):$/;"	m	class:SyncDisk
fn	dirspec.py	/^        fn = lambda i, b, o: If( And(on, ino == i), BitVecVal(0, 64), _fn(i, b, o))$/;"	f	member:DirSpec.forget	file:
fn	dirspec.py	/^        fn = lambda i, b, o: If( And(on, ino == i), BitVecVal(0, 64), _fn(i, b, o))$/;"	f	member:DirSpec.rmdir	file:
fn	dirspec.py	/^        fn = lambda i, b, o: If($/;"	f	member:DirSpec.write	file:
fn	yggdrasil/ufarray.py	/^        fn = lambda *args: If(And(guard, tup_eq(args, key)), val, pfn(*args))$/;"	f	member:UFunction.update	file:
fn	yggdrasil/ufarray.py	/^        fn = lambda bid, off, oldfn=self._fn: If(And(bid == key, *guard), val[off], oldfn(bid, o/;"	f	member:DiskArray.update	file:
fn	yggdrasil/ufarray.py	/^        fn = lambda bid, off: If(cond, self._fn(bid, off), other._fn(bid, off))$/;"	f	member:DiskArray.ite	file:
fn	yggdrasil/ufarray.py	/^        fn = lambda off, oldfn=self._fn: If(cond,$/;"	f	member:Block.ite	file:
foo	ast-rewrite.py	/^def foo(disk):$/;"	f
forget	dirinode.py	/^    def forget(self, ino):$/;"	m	class:DirImpl
forget	dirspec.py	/^    def forget(self, ino):$/;"	m	class:DirSpec
fork_bool	yggdrasil/test.py	/^def fork_bool(test):$/;"	f
free	test_inode.py	/^    def free(self, *args, **kwargs):$/;"	m	class:IExtSpec
free	test_inode.py	/^    def free(self, block, guard=BoolVal(True)):$/;"	m	class:ISpec
free	xv6inode.pxd	/^    cdef void free(self, uint64_t lbn)$/;"	m	class:InodeDisk
free	xv6inode.py	/^    def free(self, lbn):$/;"	m	class:InodeDisk
fresh_name	yggdrasil/util.py	/^def fresh_name(name):$/;"	f
fsize	dirspec.py	/^    def fsize(self, ino):$/;"	m	class:Attributes
fsize	diskimpl.pyx	/^    def fsize(self):$/;"	m	class:Stat
fsize	yggdrasil/diskspec.py	/^    def fsize(self):$/;"	m	class:Stat
fsync	dirinode.py	/^    def fsync(self):$/;"	m	class:DirImpl
gc	yav_dirimpl_fuse.pyx	/^cdef void gc():$/;"	f
gc1	dirinode.py	/^    def gc1(self, orph_index, off):$/;"	m	class:DirImpl
gc2	dirinode.py	/^    def gc2(self, orph_index):$/;"	m	class:DirImpl
gc3	dirinode.py	/^    def gc3(self):$/;"	m	class:DirImpl
get	diskimpl.pxd	/^    cdef uint64_t get(self, uint64_t) nogil$/;"	m	class:Block
get	diskimpl.pxd	/^    cpdef get(self, gkey, dresult)$/;"	m	class:Dict
get	diskimpl.pyx	/^    cdef uint64_t get(self, uint64_t v) nogil:$/;"	m	class:Block
get	diskimpl.pyx	/^    cpdef get(self, gkey, dresult):$/;"	m	class:Dict
get	kvimpl.py	/^    def get(self, key):$/;"	m	class:KVImpl
get	kvspec.py	/^    def get(self, key):$/;"	m	class:KVSpec
get	symbolicmap.py	/^    def get(self, gkey, dresult):$/;"	m	class:SymbolicMap
get	yggdrasil/ufarray.py	/^    def get(self, bid):$/;"	m	class:Block
get_all	ast-rewrite.py	/^    def get_all(self):$/;"	m	class:RemoveFlush
get_attr	lfs.py	/^    def get_attr(self, ino):$/;"	m	class:LFS
get_attr	test_lfs.py	/^    def get_attr(self, ino):$/;"	m	class:LFSSpec
get_iattr	dirinode.py	/^    def get_iattr(self, ino):$/;"	m	class:DirImpl
get_iattr	dirspec.py	/^    def get_iattr(self, ino):$/;"	m	class:DirSpec
get_iattr	inodepack.pxd	/^    cpdef Stat get_iattr(self, uint64_t ino, Block block=*)$/;"	m	class:InodePackDisk
get_iattr	inodepack.py	/^    def get_iattr(self, ino, block=None):$/;"	m	class:InodePackDisk
get_iattr	xv6inode.pxd	/^    cdef Stat get_iattr(self, uint64_t ino)$/;"	m	class:IndirectInodeDisk
get_iattr	xv6inode.pxd	/^    cdef Stat get_iattr(self, uint64_t ino)$/;"	m	class:InodeDisk
get_iattr	xv6inode.py	/^    def get_iattr(self, ino):$/;"	m	class:IndirectInodeDisk
get_iattr	xv6inode.py	/^    def get_iattr(self, ino):$/;"	m	class:InodeDisk
get_iattr	yggdrasil/diskspec.py	/^    def get_iattr(self, ino):$/;"	m	class:InodeSpec
get_iattr	yggdrasil/diskspec.py	/^    def get_iattr(self, ino, block=None):$/;"	m	class:InodePackSpec
get_mapping	inodepack.pxd	/^    cpdef get_mapping(self, uint64_t ino, uint64_t off, Block block=*)$/;"	m	class:InodePackDisk
get_mapping	inodepack.py	/^    def get_mapping(self, ino, off, block=None):$/;"	m	class:InodePackDisk
get_mapping	yggdrasil/diskspec.py	/^    def get_mapping(self, ino, off, block=None):$/;"	m	class:InodePackSpec
getrange	yggdrasil/ufarray.py	/^    def getrange(self, start, end=None):$/;"	m	class:Block
handle	test_fsck.pyx	/^    def handle(self, arg, res):$/;"	m	class:Exists
handle	test_fsck.pyx	/^    def handle(self, arg, res):$/;"	m	class:ForAll
handle_cmd	yggdrasil/server.py	/^    def handle_cmd(self):$/;"	m	class:Server
has_key	diskimpl.pxd	/^    cpdef has_key(self, gkey)$/;"	m	class:Dict
has_key	diskimpl.pyx	/^    cpdef has_key(self, gkey):$/;"	m	class:Dict
has_key	symbolicmap.py	/^    def has_key(self, gkey):$/;"	m	class:SymbolicMap
hashfn	test_kv.py	/^        hashfn = lambda key: f(*[key[i] for i in range(KVImpl.KEY_SIZE)])$/;"	f	member:KVTest.test_kvimpl	file:
ialloc	dirinode.py	/^    def ialloc(self):$/;"	m	class:DirImpl
ialloc	dirspec.py	/^    def ialloc(self, on):$/;"	m	class:DirSpec
index	dirinode.py	/^    def index(self, idx):$/;"	m	class:Orphans
inner	disk.py	/^    def inner(*args, **kwargs):$/;"	f	function:_native	file:
inner	yggdrasil/test.py	/^    def inner(self):$/;"	f	function:fork_bool	file:
inode_obj	lfs_fuse.pyx	/^inode_obj = None$/;"	v
inrange	test_inode.py	/^    def inrange(self, off):$/;"	m	class:ISpec
is_dir	dirinode.py	/^    def is_dir(self, ino):$/;"	m	class:DirImpl
is_dir	dirspec.py	/^    def is_dir(self, ino):$/;"	m	class:DirSpec
is_free	test_inode.py	/^    def is_free(self, *args, **kwargs):$/;"	m	class:IExtSpec
is_free	test_inode.py	/^    def is_free(self, block):$/;"	m	class:ISpec
is_free	xv6inode.pxd	/^    cdef bint is_free(self, uint64_t vbn)$/;"	m	class:IndirectInodeDisk
is_free	xv6inode.pxd	/^    cdef bint is_free(self, uint64_t vbn)$/;"	m	class:InodeDisk
is_free	xv6inode.py	/^    def is_free(self, lbn):$/;"	m	class:IndirectInodeDisk
is_free	xv6inode.py	/^    def is_free(self, lbn):$/;"	m	class:InodeDisk
is_gcable	dirinode.py	/^    def is_gcable(self, ino):$/;"	m	class:DirImpl
is_ifree	dirinode.py	/^    def is_ifree(self, ino):$/;"	m	class:DirImpl
is_ifree	dirspec.py	/^    def is_ifree(self, ino):$/;"	m	class:DirSpec
is_mapped	test_inode.py	/^    def is_mapped(self, ino, off):$/;"	m	class:ISpec
is_mapped	xv6inode.pxd	/^    cdef bint is_mapped(self, uint64_t vbn)$/;"	m	class:IndirectInodeDisk
is_mapped	xv6inode.pxd	/^    cdef bint is_mapped(self, uint64_t vbn)$/;"	m	class:InodeDisk
is_mapped	xv6inode.py	/^    def is_mapped(self, vbn):$/;"	m	class:IndirectInodeDisk
is_mapped	xv6inode.py	/^    def is_mapped(self, vbn):$/;"	m	class:InodeDisk
is_mapped	yggdrasil/diskspec.py	/^    def is_mapped(self, vbn):$/;"	m	class:InodeSpec
is_mapped	yggdrasil/diskspec.py	/^    def is_mapped(self, vbn):$/;"	m	class:RangeVirtualTxnDisk
is_mapped	yggdrasil/diskspec.py	/^    def is_mapped(self, vbn):$/;"	m	class:VirtualAsyncDisk
is_regular	dirinode.py	/^    def is_regular(self, ino):$/;"	m	class:DirImpl
is_regular	dirspec.py	/^    def is_regular(self, ino):$/;"	m	class:DirSpec
is_set	bitmap.pxd	/^    cpdef bint is_set(self, uint64_t bit)$/;"	m	class:BitmapDisk
is_set	bitmap.py	/^    def is_set(self, bit):$/;"	m	class:BitmapDisk
is_set	yggdrasil/diskspec.py	/^    def is_set(self, bit):$/;"	m	class:BitmapSpec
is_valid	dirinode.py	/^    def is_valid(self, ino):$/;"	m	class:DirImpl
is_valid	dirspec.py	/^    def is_valid(self, ino):$/;"	m	class:DirSpec
ite	yggdrasil/ufarray.py	/^    def ite(self, other, cond):$/;"	m	class:Block
ite	yggdrasil/ufarray.py	/^    def ite(self, other, cond):$/;"	m	class:DiskArray
ite	yggdrasil/ufarray.py	/^    def ite(self, other, cond):$/;"	m	class:String
lastp	verify.py	/^                lastp = time.time()$/;"	v
lastp	verify.py	/^    lastp = time.time()$/;"	v
lfs	lfs.py	/^    lfs = create_lfs()$/;"	v
ll_create	yav_dirimpl_fuse.pyx	/^cdef void ll_create(fuse_req_t req, fuse_ino_t parent,$/;"	f
ll_forget	yav_dirimpl_fuse.pyx	/^cdef void ll_forget(fuse_req_t req, fuse_ino_t ino, uint64_t nlookup):$/;"	f
ll_fsync	yav_dirimpl_fuse.pyx	/^cdef void ll_fsync(fuse_req_t req, fuse_ino_t ino,$/;"	f
ll_fsyncdir	yav_dirimpl_fuse.pyx	/^cdef void ll_fsyncdir(fuse_req_t req, fuse_ino_t ino,$/;"	f
ll_getattr	lfs_fuse.pyx	/^cdef void ll_getattr(fuse_req_t req, fuse_ino_t ino, fuse_file_info *fi):$/;"	f
ll_getattr	yav_dirimpl_fuse.pyx	/^cdef void ll_getattr(fuse_req_t req, fuse_ino_t ino, fuse_file_info *fi):$/;"	f
ll_init	yav_dirimpl_fuse.pyx	/^cdef void ll_init(void *userdata, fuse_conn_info *conn):$/;"	f
ll_lookup	lfs_fuse.pyx	/^cdef void ll_lookup(fuse_req_t req, fuse_ino_t parent, const char *name):$/;"	f
ll_lookup	yav_dirimpl_fuse.pyx	/^cdef void ll_lookup(fuse_req_t req, fuse_ino_t parent, const char *name):$/;"	f
ll_mkdir	yav_dirimpl_fuse.pyx	/^cdef void ll_mkdir(fuse_req_t req, fuse_ino_t parent,$/;"	f
ll_mknod	lfs_fuse.pyx	/^cdef void ll_mknod(fuse_req_t req, fuse_ino_t parent, const char *name,$/;"	f
ll_mknod	yav_dirimpl_fuse.pyx	/^cdef void ll_mknod(fuse_req_t req, fuse_ino_t parent, const char *name,$/;"	f
ll_open	yav_dirimpl_fuse.pyx	/^cdef void ll_open(fuse_req_t req, fuse_ino_t ino, fuse_file_info *fi):$/;"	f
ll_read	yav_dirimpl_fuse.pyx	/^cdef void ll_read(fuse_req_t req, fuse_ino_t ino, size_t size, off_t off, fuse_file_info *fi):$/;"	f
ll_readdir	lfs_fuse.pyx	/^cdef void ll_readdir(fuse_req_t req, fuse_ino_t ino,$/;"	f
ll_readdir	yav_dirimpl_fuse.pyx	/^cdef void ll_readdir(fuse_req_t req, fuse_ino_t ino,$/;"	f
ll_readlink	yav_dirimpl_fuse.pyx	/^cdef void ll_readlink(fuse_req_t req, fuse_ino_t ino):$/;"	f
ll_rename	yav_dirimpl_fuse.pyx	/^cdef void ll_rename(fuse_req_t req, fuse_ino_t oldparent, const char *oldname,$/;"	f
ll_rmdir	yav_dirimpl_fuse.pyx	/^cdef void ll_rmdir(fuse_req_t req, fuse_ino_t parent, const char *name):$/;"	f
ll_setattr	yav_dirimpl_fuse.pyx	/^cdef void ll_setattr(fuse_req_t req, fuse_ino_t ino, struct_stat *attr,$/;"	f
ll_symlink	yav_dirimpl_fuse.pyx	/^cdef void ll_symlink(fuse_req_t req, const char *link, fuse_ino_t parent,$/;"	f
ll_unlink	yav_dirimpl_fuse.pyx	/^cdef void ll_unlink(fuse_req_t req, fuse_ino_t parent, const char *name):$/;"	f
ll_write	yav_dirimpl_fuse.pyx	/^cdef void ll_write(fuse_req_t req, fuse_ino_t ino, const char *buf,$/;"	f
locate_dentry	dirspec.py	/^    def locate_dentry(self, block, name):$/;"	m	class:DirLook
locate_dentry	diskimpl.pxd	/^    cdef int locate_dentry(self, Block block, uint64_t[15] name) nogil$/;"	m	class:DentryLookup
locate_dentry	diskimpl.pyx	/^    cdef int locate_dentry(self, Block block, uint64_t[15] name) nogil:$/;"	m	class:DentryLookup
locate_dentry_ino	dirinode.pxd	/^    cdef object locate_dentry_ino(self, uint64_t ino, uint64_t[15] name)$/;"	m	class:DirImpl
locate_dentry_ino	dirinode.py	/^    def locate_dentry_ino(self, ino, name):$/;"	m	class:DirImpl
locate_dentry_ino	dirspec.py	/^    def locate_dentry_ino(self, ino, name):$/;"	m	class:DirLook
locate_dentry_ino	diskimpl.pxd	/^    cdef tuple locate_dentry_ino(self, uint64_t ino, uint64_t[15] name)$/;"	m	class:DentryLookup
locate_dentry_ino	diskimpl.pyx	/^    cdef tuple locate_dentry_ino(self, uint64_t ino, uint64_t[15] name):$/;"	m	class:DentryLookup
locate_empty_dentry_slot_err_ino	dirinode.pxd	/^    cdef object locate_empty_dentry_slot_err_ino(self, uint64_t ino)$/;"	m	class:DirImpl
locate_empty_dentry_slot_err_ino	dirinode.py	/^    def locate_empty_dentry_slot_err_ino(self, ino):$/;"	m	class:DirImpl
locate_empty_dentry_slot_ino	dirinode.pxd	/^    cdef object locate_empty_dentry_slot_ino(self, uint64_t ino)$/;"	m	class:DirImpl
locate_empty_dentry_slot_ino	dirinode.py	/^    def locate_empty_dentry_slot_ino(self, ino):$/;"	m	class:DirImpl
locate_empty_slot	dirspec.py	/^    def locate_empty_slot(self, block):$/;"	m	class:DirLook
locate_empty_slot	diskimpl.pxd	/^    cdef int locate_empty_slot(self, Block block) nogil$/;"	m	class:DentryLookup
locate_empty_slot	diskimpl.pyx	/^    cdef int locate_empty_slot(self, Block block) nogil:$/;"	m	class:DentryLookup
locate_empty_slot_ino	dirspec.py	/^    def locate_empty_slot_ino(self, ino):$/;"	m	class:DirLook
locate_empty_slot_ino	diskimpl.pxd	/^    cdef tuple locate_empty_slot_ino(self, uint64_t ino)$/;"	m	class:DentryLookup
locate_empty_slot_ino	diskimpl.pyx	/^    cdef tuple locate_empty_slot_ino(self, uint64_t ino):$/;"	m	class:DentryLookup
lookup	dirinode.pxd	/^    cdef uint64_t lookup(self, uint64_t parent, uint64_t[15] name)$/;"	m	class:DirImpl
lookup	dirinode.py	/^    def lookup(self, parent, name):$/;"	m	class:DirImpl
lookup	dirspec.py	/^    def lookup(self, parent, name):$/;"	m	class:DirSpec
lookup	lfs.py	/^    def lookup(self, parent, name):$/;"	m	class:LFS
lookup	test_lfs.py	/^    def lookup(self, parent, name):$/;"	m	class:LFSSpec
main	lfs_fuse.pyx	/^def main():$/;"	f
main	yav_dirimpl_fuse.pyx	/^def main():$/;"	f
main	yggdrasil/test.py	/^def main(*args, **kwargs):$/;"	f
mappingi	xv6inode.pxd	/^    cdef uint64_t mappingi(self, uint64_t vbn)$/;"	m	class:IndirectInodeDisk
mappingi	xv6inode.pxd	/^    cdef uint64_t mappingi(self, uint64_t vbn)$/;"	m	class:InodeDisk
mappingi	xv6inode.py	/^    def mappingi(self, vbn):$/;"	m	class:IndirectInodeDisk
mappingi	xv6inode.py	/^    def mappingi(self, vbn):$/;"	m	class:InodeDisk
mappingi	yggdrasil/diskspec.py	/^    def mappingi(self, vbn):$/;"	m	class:InodeSpec
match_bmap	test_inode.py	/^    def match_bmap(self):$/;"	m	class:ISpecTest
match_bmap	test_xv6inode.py	/^    match_bmap = _create_bid$/;"	v	class:IndirectInodeDiskRefinement
match_bmap	test_xv6inode.py	/^    match_bmap = _create_bid$/;"	v	class:InodeDiskRefinement
match_bunmap	test_xv6inode.py	/^    match_bunmap = _create_bid$/;"	v	class:IndirectInodeDiskRefinement
match_bunmap	test_xv6inode.py	/^    match_bunmap = _create_bid$/;"	v	class:InodeDiskRefinement
match_forget	test_dirspec.py	/^    def match_forget(self):$/;"	m	class:DirRefinementTest
match_mknod	test_dirspec.py	/^    def match_mknod(self):$/;"	m	class:DirRefinementTest
match_mknod	test_lfs.py	/^    def match_mknod(self):$/;"	m	class:LFSRefinement
match_rename	test_dirspec.py	/^    def match_rename(self):$/;"	m	class:DirRefinementTest
match_rmdir	test_dirspec.py	/^    def match_rmdir(self):$/;"	m	class:DirRefinementTest
match_set_bit	test_bitmap.py	/^    def match_set_bit(self):$/;"	m	class:TestBitmapDisk
match_set_iattr	test_inodepack.py	/^    def match_set_iattr(self):$/;"	m	class:InodePackDiskRefinement
match_set_iattr	test_xv6inode.py	/^    def match_set_iattr(self):$/;"	m	class:IndirectInodeDiskRefinement
match_set_iattr	test_xv6inode.py	/^    def match_set_iattr(self):$/;"	m	class:InodeDiskRefinement
match_set_mapping	test_inodepack.py	/^    def match_set_mapping(self):$/;"	m	class:InodePackDiskRefinement
match_unlink	test_dirspec.py	/^    def match_unlink(self):$/;"	m	class:DirRefinementTest
match_unset_bit	test_bitmap.py	/^    def match_unset_bit(self):$/;"	m	class:TestBitmapDisk
match_write	test_diskspec.py	/^    def match_write(self, spec=None, impl=None):$/;"	m	class:VirtualAsyncDiskTest
match_write	test_partition.py	/^    def match_write(self):$/;"	m	class:PartitionRefinement
match_write_tx	test_waldisk.py	/^    match_write_tx = _gen_iov$/;"	v	class:WALDiskTestRefinement
match_write_tx_nocommit	test_waldisk.py	/^    match_write_tx_nocommit = lambda self, *args, **kwargs: self._gen_iov(*args, **kwargs)$/;"	m	class:WALDiskTestRefinement
match_writev	test_waldisk.py	/^    match_writev = _gen_iov$/;"	v	class:WALDiskTestRefinement
mkfs	lfs.py	/^def mkfs(disk):$/;"	f
mkfs	xv6inode.py	/^    def mkfs(self):$/;"	m	class:InodeDisk
mkfs	xv6inode.py	/^def mkfs(fdisk):$/;"	f
mknod	dirinode.pxd	/^    cdef tuple mknod(self, uint64_t parent, uint64_t[16] name, uint64_t mode, uint64_t mtime)$/;"	m	class:DirImpl
mknod	dirinode.py	/^    def mknod(self, parent, name, mode, mtime):$/;"	m	class:DirImpl
mknod	dirspec.py	/^    def mknod(self, parent, name, mode, mtime):$/;"	m	class:DirSpec
mknod	lfs.py	/^    def mknod(self, parent, name, mode, mtime):$/;"	m	class:LFS
mknod	lfs_fuse.pyx	/^cdef mknod(fuse_ino_t parent, const char *name, mode_t mode, dev_t rdev):$/;"	f
mknod	test_lfs.py	/^    def mknod(self, parent, name, mode, mtime):$/;"	m	class:LFSSpec
mknod	yav_dirimpl_fuse.pyx	/^cdef (uint64_t, uint64_t) mknod(fuse_ino_t parent, const char *name, mode_t mode, dev_t rdev):$/;"	f
mkstat	lfs_fuse.pyx	/^cdef int mkstat(fuse_ino_t ino, struct_stat *stbuf):$/;"	f
mkstat	yav_dirimpl_fuse.pyx	/^cdef int mkstat(fuse_ino_t ino, struct_stat *stbuf):$/;"	f
mode	dirspec.py	/^    def mode(self, ino):$/;"	m	class:Attributes
model	yggdrasil/server.py	/^    def model(self):$/;"	m	class:Server
model	yggdrasil/solver.py	/^    def model(self):$/;"	m	class:Solver
model	yggdrasil/solver.py	/^    model = s.model()$/;"	v
model_evaluate	yggdrasil/server.py	/^    def model_evaluate(self, term):$/;"	m	class:Server
mp	yggdrasil/test.py	/^import multiprocessing as mp$/;"	I
mtime	dirspec.py	/^    def mtime(self, ino):$/;"	m	class:Attributes
n	verify.py	/^n = time.time()$/;"	v
native	disk.py	/^native = True$/;"	v
nlink	dirspec.py	/^    def nlink(self, ino):$/;"	m	class:Attributes
nop	yggdrasil/util.py	/^def nop(*args, **kwargs):$/;"	f
nop_gc1	test_dirspec.py	/^    def nop_gc1(self):$/;"	m	class:DirRefinementTest
nop_gc2	test_dirspec.py	/^    def nop_gc2(self):$/;"	m	class:DirRefinementTest
nop_gc3	test_dirspec.py	/^    def nop_gc3(self):$/;"	m	class:DirRefinementTest
np	verify.py	/^    np = 0$/;"	v
on	yggdrasil/diskspec.py	/^    def on(self):$/;"	m	class:Machine
out	verify.py	/^        out = w.stderr.read(1)$/;"	v
outp	verify.py	/^    outp = ""$/;"	v
pack_list	yggdrasil/util.py	/^def pack_list(*p):$/;"	f
pn	verify.py	/^    pn = time.time()$/;"	v
pop	yggdrasil/server.py	/^    def pop(self):$/;"	m	class:Server
pop	yggdrasil/solver.py	/^    def pop(self):$/;"	m	class:Solver
post	yggdrasil/test.py	/^    def post(self, *args, **kwargs):$/;"	m	class:RefinementTest
post_reverse_map	test_xv6inode.py	/^            post_reverse_map = lambda x: If(x == lbn, args[0], pre_reverse_map(x))$/;"	f	member:InodeDiskRefinement.pre_post	file:
post_reverse_map	test_xv6inode.py	/^            post_reverse_map = lambda x: If(x == lbn,$/;"	f	member:IndirectInodeDiskRefinement.pre_post	file:
pprove	yggdrasil/test.py	/^    def pprove(self, claim, *args, **kwargs):$/;"	m	class:DiskTest
pre	yggdrasil/test.py	/^    def pre(self, *args, **kwargs):$/;"	m	class:RefinementTest
pre_post	test_lfs.py	/^    def pre_post(self, spec, impl, **kwargs):$/;"	m	class:LFSRefinement
pre_post	test_xv6inode.py	/^    def pre_post(self, spec, impl, fnargs, *args, **kwargs):$/;"	m	class:IndirectInodeDiskRefinement
pre_post	test_xv6inode.py	/^    def pre_post(self, spec, impl, fnargs, *args, **kwargs):$/;"	m	class:InodeDiskRefinement
pre_post	yggdrasil/test.py	/^    def pre_post(self, *args, **kwargs):$/;"	m	class:RefinementTest
prod	Makefile	/^prod: bitmap.so inodepack.so waldisk.so xv6inode.so yav_xv6_main.so dirinode.so$/;"	t
profile	yav_xv6_main.py	/^def profile():$/;"	f
prove	yggdrasil/test.py	/^    def prove(self, claim, *args, **kwargs):$/;"	m	class:DiskTest
psolve	yggdrasil/test.py	/^    def psolve(self, *args, **kwargs):$/;"	m	class:DiskTest
push	yggdrasil/server.py	/^    def push(self):$/;"	m	class:Server
push	yggdrasil/solver.py	/^    def push(self):$/;"	m	class:Solver
put	kvimpl.py	/^    def put(self, key, value):$/;"	m	class:KVImpl
put	kvspec.py	/^    def put(self, key, value):$/;"	m	class:KVSpec
range	yggdrasil/diskspec.py	/^    def range(self, dev):$/;"	m	class:MultiTxnDisk
read	dirinode.py	/^    def read(self, ino, blocknum):$/;"	m	class:DirImpl
read	dirspec.py	/^    def read(self, ino, blocknum, off):$/;"	m	class:DirSpec
read	diskimpl.pxd	/^    cpdef Block read(self, uint64_t blknum)$/;"	m	class:AsyncDisk
read	diskimpl.pxd	/^    cpdef Block read(self, uint64_t blknum)$/;"	m	class:PartitionAsyncDisk
read	diskimpl.pyx	/^    cpdef Block read(self, uint64_t blknum):$/;"	m	class:AsyncDisk
read	diskimpl.pyx	/^    cpdef Block read(self, uint64_t blknum):$/;"	m	class:PartitionAsyncDisk
read	inodepack.pxd	/^    cpdef Block read(self, uint64_t ino)$/;"	m	class:InodePackDisk
read	inodepack.py	/^    def read(self, ino):$/;"	m	class:InodePackDisk
read	lfs.py	/^    def read(self, ino, block):$/;"	m	class:LFS
read	partition.py	/^    def read(self, bid):$/;"	m	class:Partition
read	test_diskspec.py	/^    def read(self, bid):$/;"	m	class:FlushingDisk
read	test_inode.py	/^    def read(self, *args, **kwargs):$/;"	m	class:IExtSpec
read	test_inode.py	/^    def read(self, ino, off):$/;"	m	class:BlockImpl
read	test_inode.py	/^    def read(self, ino, off):$/;"	m	class:ISpec
read	waldisk.pxd	/^    cpdef Block read(self, uint64_t dev, uint64_t bid)$/;"	m	class:WALDisk
read	waldisk.py	/^    def read(self, dev, bid):$/;"	m	class:WALDisk
read	xv6inode.pxd	/^    cdef Block read(self, uint64_t lbn)$/;"	m	class:IndirectInodeDisk
read	xv6inode.pxd	/^    cdef Block read(self, uint64_t lbn)$/;"	m	class:InodeDisk
read	xv6inode.py	/^    def read(self, lbn):$/;"	m	class:IndirectInodeDisk
read	xv6inode.py	/^    def read(self, lbn):$/;"	m	class:InodeDisk
read	yggdrasil/diskspec.py	/^    def read(self, bid):$/;"	m	class:AsyncDisk
read	yggdrasil/diskspec.py	/^    def read(self, bid):$/;"	m	class:InodePackSpec
read	yggdrasil/diskspec.py	/^    def read(self, bid):$/;"	m	class:SyncDisk
read	yggdrasil/diskspec.py	/^    def read(self, bid):$/;"	m	class:TxnDisk
read	yggdrasil/diskspec.py	/^    def read(self, dev, bid):$/;"	m	class:MultiTxnDisk
read	yggdrasil/diskspec.py	/^    def read(self, lbn):$/;"	m	class:InodeSpec
read	yggdrasil/diskspec.py	/^    def read(self, vbn):$/;"	m	class:VirtualAsyncDisk
read	yggdrasil/solver_utils.py	/^def read(stream, count):$/;"	f
read_cmd	yggdrasil/solver_utils.py	/^def read_cmd(stream):$/;"	f
readm	yggdrasil/diskspec.py	/^    def readm(self, vbn):$/;"	m	class:RangeVirtualTxnDisk
remove_flush_opt	ast-rewrite.py	/^def remove_flush_opt(obj):$/;"	f
rename	dirinode.pxd	/^    cdef uint64_t rename(self, uint64_t oparent, uint64_t[15] oname, uint64_t nparent, uint64_t[/;"	m	class:DirImpl
rename	dirinode.py	/^    def rename(self, oparent, oname, nparent, nname):$/;"	m	class:DirImpl
rename	dirspec.py	/^    def rename(self, oparent, oname, nparent, nname):$/;"	m	class:DirSpec
reply_buf_limited	lfs_fuse.pyx	/^cdef int reply_buf_limited(fuse_req_t req, const char *buf, size_t bufsize, off_t off, size_t ma/;"	f
reply_buf_limited	yav_dirimpl_fuse.pyx	/^cdef int reply_buf_limited(fuse_req_t req, const char *buf, size_t bufsize, off_t off, size_t ma/;"	f
reset	dirinode.py	/^    def reset(self):$/;"	m	class:Orphans
rmdir	dirinode.pxd	/^    cdef tuple rmdir(self, uint64_t parent, uint64_t[15] name)$/;"	m	class:DirImpl
rmdir	dirinode.py	/^    def rmdir(self, parent, name):$/;"	m	class:DirImpl
rmdir	dirspec.py	/^    def rmdir(self, parent, name):$/;"	m	class:DirSpec
run	lfs_fuse_main.py	/^def run():$/;"	f
run	test_fsck.pyx	/^def run():$/;"	f
run	yav_xv6_main.py	/^def run():$/;"	f
run	yggdrasil/server.py	/^    def run(self):$/;"	m	class:Server
run	yggdrasil/test.py	/^    def run(self, result, *args, **kwargs):$/;"	m	class:DiskTest
s	yggdrasil/solver.py	/^    s = Solver()$/;"	v
set	diskimpl.pxd	/^    cdef void set(self, uint64_t, uint64_t) nogil$/;"	m	class:Block
set	diskimpl.pyx	/^    cdef void set(self, uint64_t v, uint64_t k) nogil:$/;"	m	class:Block
set	yggdrasil/server.py	/^    def set(self, **kwargs):$/;"	m	class:Server
set	yggdrasil/solver.py	/^    def set(self, *args, **kwargs):$/;"	m	class:Solver
set	yggdrasil/ufarray.py	/^    def set(self, bid, val):$/;"	m	class:Block
set	yggdrasil/ufarray.py	/^    def set(self, key, val):$/;"	m	class:Block
setUp	test_diskspec.py	/^    def setUp(self):$/;"	m	class:AsyncDiskTest
setUp	test_diskspec.py	/^    def setUp(self):$/;"	m	class:InodeSpecTest
setUp	test_kv.py	/^    def setUp(self):$/;"	m	class:KVTest
setUp	test_tenaciousd.py	/^    def setUp(self):$/;"	m	class:TenaciousdLogTest
setUp	test_ufarray.py	/^    def setUp(self):$/;"	m	class:ArrayTest
setUp	yggdrasil/test.py	/^    def setUp(self):$/;"	m	class:DiskTest
setUp	yggdrasil/test.py	/^    def setUp(self):$/;"	m	class:RefinementTest
set_bit	bitmap.pxd	/^    cpdef void set_bit(self, uint64_t bit)$/;"	m	class:BitmapDisk
set_bit	bitmap.py	/^    def set_bit(self, bit):$/;"	m	class:BitmapDisk
set_bit	yggdrasil/diskspec.py	/^    def set_bit(self, bit):$/;"	m	class:BitmapSpec
set_bsize	dirspec.py	/^    def set_bsize(self, ino, bsize, guard=BoolVal(True)):$/;"	m	class:Attributes
set_fsize	dirspec.py	/^    def set_fsize(self, ino, fsize, guard=BoolVal(True)):$/;"	m	class:Attributes
set_iattr	dirinode.py	/^    def set_iattr(self, ino, attr):$/;"	m	class:DirImpl
set_iattr	inodepack.pxd	/^    cpdef void set_iattr(self, uint64_t ino, Stat attr, Block block=*)$/;"	m	class:InodePackDisk
set_iattr	inodepack.py	/^    def set_iattr(self, ino, attr, block=None):$/;"	m	class:InodePackDisk
set_iattr	xv6inode.pxd	/^    cdef void set_iattr(self, uint64_t ino, Stat attr)$/;"	m	class:IndirectInodeDisk
set_iattr	xv6inode.pxd	/^    cdef void set_iattr(self, uint64_t ino, Stat attr)$/;"	m	class:InodeDisk
set_iattr	xv6inode.py	/^    def set_iattr(self, ino, attr):$/;"	m	class:IndirectInodeDisk
set_iattr	xv6inode.py	/^    def set_iattr(self, ino, attr):$/;"	m	class:InodeDisk
set_iattr	yggdrasil/diskspec.py	/^    def set_iattr(self, ino, attr):$/;"	m	class:InodeSpec
set_iattr	yggdrasil/diskspec.py	/^    def set_iattr(self, ino, attr, block=None):$/;"	m	class:InodePackSpec
set_mapping	inodepack.pxd	/^    cpdef set_mapping(self, uint64_t ino, uint64_t off, uint64_t ptr, Block block=*)$/;"	m	class:InodePackDisk
set_mapping	inodepack.py	/^    def set_mapping(self, ino, off, ptr, block=None):$/;"	m	class:InodePackDisk
set_mapping	yggdrasil/diskspec.py	/^    def set_mapping(self, ino, off, ptr, block=None):$/;"	m	class:InodePackSpec
set_mode	dirspec.py	/^    def set_mode(self, ino, mode, guard=BoolVal(True)):$/;"	m	class:Attributes
set_mtime	dirspec.py	/^    def set_mtime(self, ino, mtime, guard=BoolVal(True)):$/;"	m	class:Attributes
set_nlink	dirspec.py	/^    def set_nlink(self, ino, nlink, guard=BoolVal(True)):$/;"	m	class:Attributes
setrange	yggdrasil/ufarray.py	/^    def setrange(self, start, s):$/;"	m	class:Block
show	yggdrasil/test.py	/^    def show(self, *args, **kwargs):$/;"	m	class:DiskTest
size	dirinode.py	/^    def size(self):$/;"	m	class:Orphans
size	logspec.py	/^    def size(self):$/;"	m	class:LogSpecEntry
size	yggdrasil/ufarray.py	/^    def size(self):$/;"	m	class:Block
size	yggdrasil/ufarray.py	/^    def size(self):$/;"	m	class:String
solve	yggdrasil/test.py	/^    def solve(self, *args, **kwargs):$/;"	m	class:DiskTest
solve	yggdrasil/util.py	/^def solve(*args, **keywords):$/;"	f
sutils	yggdrasil/solver.py	/^import solver_utils as sutils$/;"	I
t	verify.py	/^            t = time.time() - pn$/;"	v
tail	logspec.py	/^    def tail(self):$/;"	m	class:LogSpec
test_append	test_tenaciousd.py	/^    def test_append(self):$/;"	m	class:TenaciousdLogTest
test_array_update	test_ufarray.py	/^    def test_array_update(self):$/;"	m	class:ArrayTest
test_atomic	test_waldisk.py	/^    def test_atomic(self):$/;"	m	class:WALDiskTestRefinement
test_block_update	test_ufarray.py	/^    def test_block_update(self):$/;"	m	class:ArrayTest
test_bmap	test_diskspec.py	/^    def test_bmap(self):$/;"	m	class:InodeSpecTest
test_bmap	test_xv6inode.py	/^    def test_bmap(self):$/;"	m	class:InodeDiskRefinement
test_bunmap	test_diskspec.py	/^    def test_bunmap(self):$/;"	m	class:InodeSpecTest
test_bunmap	test_xv6inode.py	/^    def test_bunmap(self):$/;"	m	class:InodeDiskRefinement
test_compare_to_async	test_diskspec.py	/^    def test_compare_to_async(self):$/;"	m	class:InodeSpecTest
test_cp	test_cp.py	/^    def test_cp(self):$/;"	m	class:CPRefinement
test_create_spec	test_inode.py	/^    def test_create_spec(self):$/;"	m	class:ISpecTest
test_flush	test_diskspec.py	/^    def test_flush(self):$/;"	m	class:AsyncDiskTest
test_flushingdisk_is_sync	test_diskspec.py	/^    def test_flushingdisk_is_sync(self):$/;"	m	class:SyncDiskTest
test_idempotent_recovery	test_waldisk.py	/^    def test_idempotent_recovery(self):$/;"	m	class:WALDiskTestRefinement
test_kvimpl	test_kv.py	/^    def test_kvimpl(self):$/;"	m	class:KVTest
test_kvspec	test_kv.py	/^    def test_kvspec(self):$/;"	m	class:KVTest
test_match_write	test_dirspec.py	/^    def test_match_write(self):$/;"	m	class:DirRefinement
test_nocrash	test_diskspec.py	/^    def test_nocrash(self):$/;"	m	class:AsyncDiskTest
test_prefix	test_diskspec.py	/^    def test_prefix(self):$/;"	m	class:AsyncDiskTest
test_reorder	test_diskspec.py	/^    def test_reorder(self):$/;"	m	class:AsyncDiskTest
test_spec_alloc	test_inode.py	/^    def test_spec_alloc(self):$/;"	m	class:ISpecTest
test_spec_alloc_unalloc	test_inode.py	/^    def test_spec_alloc_unalloc(self):$/;"	m	class:ISpecTest
test_spec_bmap	test_inode.py	/^    def test_spec_bmap(self):$/;"	m	class:ISpecTest
test_spec_bmap_simple	test_inode.py	/^    def test_spec_bmap_simple(self):$/;"	m	class:ISpecTest
test_spec_bmap_simple2	test_inode.py	/^    def test_spec_bmap_simple2(self):$/;"	m	class:ISpecTest
test_syncdisk_is_async	test_diskspec.py	/^    def test_syncdisk_is_async(self):$/;"	m	class:SyncDiskTest
test_write_two	test_diskspec.py	/^    def test_write_two(self):$/;"	m	class:AsyncDiskTest
to_smt2	yggdrasil/solver.py	/^def to_smt2(*terms):$/;"	f
to_stat	dirspec.py	/^    def to_stat(self, ino):$/;"	m	class:Attributes
truncate	dirinode.py	/^    def truncate(self, ino, fsize):$/;"	m	class:DirImpl
truncate	dirspec.py	/^    def truncate(self, ino, size):$/;"	m	class:DirSpec
tup_eq	yggdrasil/ufarray.py	/^def tup_eq(t1, t2):$/;"	f
unlink	dirinode.pxd	/^    cdef uint64_t unlink(self, uint64_t parent, uint64_t[15] name)$/;"	m	class:DirImpl
unlink	dirinode.py	/^    def unlink(self, parent, name):$/;"	m	class:DirImpl
unlink	dirspec.py	/^    def unlink(self, parent, name):$/;"	m	class:DirSpec
unpack_list	yggdrasil/util.py	/^def unpack_list(p, size):$/;"	f
unset_bit	bitmap.pxd	/^    cpdef void unset_bit(self, uint64_t bit)$/;"	m	class:BitmapDisk
unset_bit	bitmap.py	/^    def unset_bit(self, bit):$/;"	m	class:BitmapDisk
unset_bit	yggdrasil/diskspec.py	/^    def unset_bit(self, bit):$/;"	m	class:BitmapSpec
update	yggdrasil/ufarray.py	/^    def update(self, key, val, *guard):$/;"	m	class:DiskArray
update	yggdrasil/ufarray.py	/^    def update(self, key, val, guard=True):$/;"	m	class:UFunction
update_block	yav_dirimpl_fuse.pyx	/^cdef void update_block(Block b, size_t off, const char *buf, size_t size) nogil:$/;"	f
valid	partition.py	/^    def valid(self, bid):$/;"	m	class:Partition
verify	Makefile	/^verify: diskimpl.so$/;"	t
visit_Call	ast-rewrite.py	/^    def visit_Call(self, node):$/;"	m	class:RemoveFlush
w	verify.py	/^    w = subprocess.Popen('python2 %s' % i, shell=True, stdin=subprocess.PIPE, stderr=subprocess./;"	v
write	dirinode.py	/^    def write(self, ino, blocknum, v, size=BitVecVal(4096, 32)):$/;"	m	class:DirImpl
write	dirspec.py	/^    def write(self, ino, blocknum, v, size=4096):$/;"	m	class:DirSpec
write	diskimpl.pxd	/^    cpdef void write(self, uint64_t blknum, Block block, bint cond=*)$/;"	m	class:AsyncDisk
write	diskimpl.pxd	/^    cpdef void write(self, uint64_t blknum, Block block, bint cond=*)$/;"	m	class:PartitionAsyncDisk
write	diskimpl.pyx	/^    cpdef void write(self, uint64_t blknum, Block block, bint cond=1):$/;"	m	class:AsyncDisk
write	diskimpl.pyx	/^    cpdef void write(self, uint64_t blknum, Block block, bint cond=1):$/;"	m	class:PartitionAsyncDisk
write	partition.py	/^    def write(self, bid, block):$/;"	m	class:Partition
write	test_diskspec.py	/^    def write(self, bid, data):$/;"	m	class:FlushingDisk
write	test_inode.py	/^    def write(self, *args, **kwargs):$/;"	m	class:IExtSpec
write	test_inode.py	/^    def write(self, ino, off, value):$/;"	m	class:BlockImpl
write	test_inode.py	/^    def write(self, ino, off, value):$/;"	m	class:ISpec
write	waldisk.py	/^    def write(self, dev, bid, data):$/;"	m	class:WALDisk
write	xv6inode.py	/^    def write(self, lbn, data):$/;"	m	class:IndirectInodeDisk
write	xv6inode.py	/^    def write(self, lbn, data):$/;"	m	class:InodeDisk
write	yggdrasil/diskspec.py	/^    def write(self, bid, data):$/;"	m	class:SyncDisk
write	yggdrasil/diskspec.py	/^    def write(self, bid, data, guard=BoolVal(True)):$/;"	m	class:AsyncDisk
write	yggdrasil/diskspec.py	/^    def write(self, lbn, data):$/;"	m	class:InodeSpec
write_cmd	yggdrasil/solver_utils.py	/^def write_cmd(stream, command):$/;"	f
write_dentry	dirinode.pxd	/^    cdef void write_dentry(self, Block block, uint64_t off, uint64_t ino, uint64_t[15] name)$/;"	m	class:DirImpl
write_dentry	dirinode.py	/^    def write_dentry(self, block, off, ino, name):$/;"	m	class:DirImpl
write_tx	waldisk.pxd	/^    cpdef void write_tx(self, uint64_t dev, uint64_t bid, Block data)$/;"	m	class:WALDisk
write_tx	waldisk.py	/^    def write_tx(self, dev, bid, data):$/;"	m	class:WALDisk
write_tx	xv6inode.pxd	/^    cdef void write_tx(self, uint64_t lbn, Block data)$/;"	m	class:IndirectInodeDisk
write_tx	xv6inode.pxd	/^    cdef void write_tx(self, uint64_t lbn, Block data)$/;"	m	class:InodeDisk
write_tx	xv6inode.py	/^    def write_tx(self, lbn, data):$/;"	m	class:IndirectInodeDisk
write_tx	xv6inode.py	/^    def write_tx(self, lbn, data):$/;"	m	class:InodeDisk
write_tx	yggdrasil/diskspec.py	/^    def write_tx(self, dev, lba, data):$/;"	m	class:MultiTxnDisk
write_tx	yggdrasil/diskspec.py	/^    def write_tx(self, lba, data):$/;"	m	class:TxnDisk
writem	yggdrasil/diskspec.py	/^    def writem(self, vbn, data):$/;"	m	class:RangeVirtualTxnDisk
writev	waldisk.pxd	/^    cpdef void writev(self, list)$/;"	m	class:WALDisk
writev	waldisk.py	/^    def writev(self, iov):$/;"	m	class:WALDisk
writev	yggdrasil/diskspec.py	/^    def writev(self, iov):$/;"	m	class:MultiTxnDisk
writev	yggdrasil/diskspec.py	/^    def writev(self, iov):$/;"	m	class:TxnDisk
x	yggdrasil/solver.py	/^    x = util.FreshBitVec('x', 32)$/;"	v
y	yggdrasil/solver.py	/^    y = util.FreshBitVec('y', 32)$/;"	v
z3	test_fsck.pyx	/^    def z3(self, *args, **kwargs):$/;"	m	class:Implies
z3	test_fsck.pyx	/^    def z3(self, *args, **kwargs):$/;"	m	class:Quantifier
z3	test_fsck.pyx	/^    def z3(self, disk):$/;"	m	class:Not
z3_option	yggdrasil/test.py	/^def z3_option(**kwargs):$/;"	f
